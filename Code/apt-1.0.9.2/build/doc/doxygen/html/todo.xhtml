<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.6"/>
<title>apt: Todo List</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">apt
   &#160;<span id="projectnumber">1.0.9.2</span>
   </div>
   <div id="projectbrief">commandline package manager</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.6 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li class="current"><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="modules.xhtml"><span>Modules</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li><a href="files.xhtml"><span>Files</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">Todo List </div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><dl class="reflist">
<dt><a class="anchor" id="_todo000021"></a>Group <a class="el" href="group__acquire.xhtml">acquire</a>  </dt>
<dd>Acquire supports inserting an object into several queues at once, but it is not clear what its behavior in this case is, and no subclass of <a class="el" href="classpkgAcquire_1_1Item.xhtml" title="Represents the process by which a pkgAcquire object should {{{ retrieve a file or a collection of fil...">pkgAcquire::Item</a> seems to actually use this capability.  </dd>
<dt><a class="anchor" id="_todo000042"></a>Member <a class="el" href="classCommandLine.xhtml#a807d3e875a27ba2faa186fc5dca4901d">CommandLine::GetCommand</a>  (Dispatch const *const Map, unsigned int const argc, char const *const *const argv) APT_PURE</dt>
<dd>How like is it that an option parameter will be also a valid Match ?  </dd>
<dt><a class="anchor" id="_todo000038"></a>Member <a class="el" href="classAPT_1_1Configuration.xhtml#a21db1e0ec61c9efdb73722de53bfb522">Configuration::getArchitectures</a>  (bool const &amp;Cached=true)</dt>
<dd>It is a bit unclean to have debian specific code here…  </dd>
<dt><a class="anchor" id="_todo000037"></a>Member <a class="el" href="classAPT_1_1Configuration.xhtml#acc33f2047d937d29e30aab9d5996dbae">Configuration::getLanguages</a>  (bool const &amp;All=false, bool const &amp;Cached=true, char const **const Locale=0)</dt>
<dd>Remove support for the old APT::Acquire::Translation  </dd>
<dt><a class="anchor" id="_todo000044"></a>Member <a class="el" href="classMMap.xhtml#abf6208ba8fc33da8217ee57b919c1892">MMap::Map</a>  (<a class="el" href="classFileFd.xhtml">FileFd</a> &amp;Fd)</dt>
<dd>Writing to compressed fd's ?  </dd>
<dt><a class="anchor" id="_todo000039"></a>Member <a class="el" href="classAPT_1_1PackageContainer.xhtml#aff88043b8fd94b37279562c24739d9e5">PackageContainer&lt; Container &gt;::erase</a>  (iterator position)</dt>
<dd>on ABI break, replace the first with the second without bool  </dd>
<dt><a class="anchor" id="_todo000060"></a>Member <a class="el" href="classAPT_1_1Progress_1_1PackageManagerFancy.xhtml#afdd3a4f5c1ff9a58b5588dd9da3ee4ec">PackageManagerFancy::GetTerminalSize</a>  ()</dt>
<dd>get from "child_pty" instead?  </dd>
<dt><a class="anchor" id="_todo000059"></a>Member <a class="el" href="classAPT_1_1Progress_1_1PackageManagerProgressDeb822Fd.xhtml#a74a17f2450599aeb313ce8c42646754c">PackageManagerProgressDeb822Fd::StartDpkg</a>  ()</dt>
<dd>use SetCloseExec here once it taught about throwing  </dd>
<dt><a class="anchor" id="_todo000058"></a>Member <a class="el" href="classAPT_1_1Progress_1_1PackageManagerProgressFd.xhtml#a74a17f2450599aeb313ce8c42646754c">PackageManagerProgressFd::StartDpkg</a>  ()</dt>
<dd>use SetCloseExec here once it taught about throwing  </dd>
<dt><a class="anchor" id="_todo000001"></a>Member <a class="el" href="classpkgAcqDiffIndex.xhtml#a843be65e3422389b1dc147a3bfeda284">pkgAcqDiffIndex::pkgAcqDiffIndex</a>  (<a class="el" href="classpkgAcquire.xhtml" title="The core download scheduler. {{{. ">pkgAcquire</a> *Owner, std::string <a class="el" href="classURI.xhtml">URI</a>, std::string URIDesc, std::string ShortDesc, <a class="el" href="classHashString.xhtml">HashString</a> ExpectedHash)</dt>
<dd>this <a href="file:/">file:/</a> check is a hack to prevent fetching  </dd>
<dt><a class="anchor" id="_todo000007"></a>Class <a class="el" href="classpkgAcqIndex.xhtml">pkgAcqIndex</a>  </dt>
<dd>Why does <a class="el" href="classpkgAcqIndex.xhtml" title="An acquire item that is responsible for fetching an index {{{ file (e.g., Packages or Sources)...">pkgAcqIndex</a> have protected members?  </dd>
<dt><a class="anchor" id="_todo000002"></a>Member <a class="el" href="classpkgAcqIndex.xhtml#a00fc58f7709000dd60501e4d9034b7b0">pkgAcqIndex::Custom600Headers</a>  ()</dt>
<dd>this really should use "IndexTarget::IsOptional()" but that  </dd>
<dt><a class="anchor" id="_todo000003"></a>Member <a class="el" href="classpkgAcqIndex.xhtml#aa3ae904a406da88bc67dd2e9e556dffa">pkgAcqIndex::Done</a>  (std::string Message, unsigned long long Size, std::string Md5Hash, <a class="el" href="structpkgAcquire_1_1MethodConfig.xhtml" title="Information about the properties of a single acquire method. {{{. ">pkgAcquire::MethodConfig</a> *Cnf)</dt>
<dd><p class="startdd">this can go away once we only ever download stuff that </p>
<p class="enddd">this points to a c++ string that goes out of scope  </p>
</dd>
<dt><a class="anchor" id="_todo000010"></a>Member <a class="el" href="classpkgAcqIndexDiffs.xhtml#a6822b4355d68d4683938302c3c4bee8b">pkgAcqIndexDiffs::available_patches</a>  </dt>
<dd>These are indexed by sha1sum; why not use some sort of dictionary instead of relying on ordering and stripping them off the front?  </dd>
<dt><a class="anchor" id="_todo000011"></a>Member <a class="el" href="classpkgAcqIndexDiffs.xhtml#ab2898413cf073f60c8ea280c811c3edfa85e95bc535755d0bcc1421d7daa90f0e">pkgAcqIndexDiffs::StateApplyDiff</a>  </dt>
<dd>No longer used  </dd>
<dt><a class="anchor" id="_todo000006"></a>Member <a class="el" href="classpkgAcqMetaClearSig.xhtml#a00fc58f7709000dd60501e4d9034b7b0">pkgAcqMetaClearSig::Custom600Headers</a>  ()</dt>
<dd>this can go away once the InRelease file is used widely  </dd>
<dt><a class="anchor" id="_todo000005"></a>Member <a class="el" href="classpkgAcqMetaIndex.xhtml#ac040add5e06f223c1cf7dfc5e38efe4f">pkgAcqMetaIndex::QueueIndexes</a>  (bool verify)</dt>
<dd>Feels wrong to check for hardcoded string here, but what should we do else…  </dd>
<dt><a class="anchor" id="_todo000008"></a>Class <a class="el" href="classpkgAcqMetaSig.xhtml">pkgAcqMetaSig</a>  </dt>
<dd>Why protected members? </dd>
<dt><a class="anchor" id="_todo000012"></a>Member <a class="el" href="classpkgAcqMetaSig.xhtml#ae7334ddd48c9dc42da62f2c1d833c3fb">pkgAcqMetaSig::IndexTargets</a>  </dt>
<dd>Why a list of pointers instead of a list of structs?  </dd>
<dt><a class="anchor" id="_todo000022"></a>Class <a class="el" href="classpkgAcquire.xhtml">pkgAcquire</a>  </dt>
<dd>Why all the protected data items and methods?  </dd>
<dt><a class="anchor" id="_todo000027"></a>Member <a class="el" href="classpkgAcquire.xhtml#ab04e9ee398f825f50e4f1ea7eaf37f77">pkgAcquire::Configs</a>  </dt>
<dd>why a hand-managed config dictionary instead of std::map?  </dd>
<dt><a class="anchor" id="_todo000009"></a>Member <a class="el" href="classpkgAcquire_1_1Item.xhtml#a7fc877a36248a6101304994352d1ad87">pkgAcquire::Item::ID</a>  </dt>
<dd>it's unused in apt itself  </dd>
<dt><a class="anchor" id="_todo000033"></a>Member <a class="el" href="structpkgAcquire_1_1MethodConfig.xhtml#add1daf6c866236479bdac390ed41f80a">pkgAcquire::MethodConfig::Next</a>  </dt>
<dd>Why not an STL container?  </dd>
<dt><a class="anchor" id="_todo000023"></a>Class <a class="el" href="classpkgAcquire_1_1Queue.xhtml">pkgAcquire::Queue</a>  </dt>
<dd>Why so many protected values?  </dd>
<dt><a class="anchor" id="_todo000032"></a>Member <a class="el" href="classpkgAcquire_1_1Queue.xhtml#abf4fe627ab803887ecd2a8af30f17147">pkgAcquire::Queue::Bump</a>  ()</dt>
<dd>Why both this and Cycle()? Are they expected to be different someday?  </dd>
<dt><a class="anchor" id="_todo000028"></a>Member <a class="el" href="classpkgAcquire_1_1Queue.xhtml#a2f4e8b582eeece0747d3fee5858b1a27">pkgAcquire::Queue::Items</a>  </dt>
<dd>why a by-hand list instead of an STL structure?  </dd>
<dt><a class="anchor" id="_todo000031"></a>Member <a class="el" href="classpkgAcquire_1_1Queue.xhtml#a76f3403ec41517cce48d96a5b1f54e1e">pkgAcquire::Queue::ItemStart</a>  (QItem *Itm, unsigned long long Size)</dt>
<dd>Unimplemented. Implement it or remove?  </dd>
<dt><a class="anchor" id="_todo000029"></a>Member <a class="el" href="classpkgAcquire_1_1Queue.xhtml#ae49de4816f8591cf1ccb70329d4dcb8c">pkgAcquire::Queue::Workers</a>  </dt>
<dd><p class="startdd">This is plural because support exists in Queue for multiple workers. However, it does not appear that there is any way to actually associate more than one worker with a queue.</p>
<p class="enddd">Why not just use a std::set?  </p>
</dd>
<dt><a class="anchor" id="_todo000025"></a>Member <a class="el" href="classpkgAcquire.xhtml#a9e42b66f176afafc1c75e78289e80e76">pkgAcquire::Queues</a>  </dt>
<dd>why a hand-managed list of queues instead of std::list or std::set?  </dd>
<dt><a class="anchor" id="_todo000014"></a>Class <a class="el" href="classpkgAcquire_1_1Worker.xhtml">pkgAcquire::Worker</a>  </dt>
<dd>Like everything else in the Acquire system, this has way too many protected items. </dd>
<dt><a class="anchor" id="_todo000016"></a>Member <a class="el" href="classpkgAcquire_1_1Worker.xhtml#a006a979c4801f6b6ceb33cb3acd6dc89">pkgAcquire::Worker::Access</a>  </dt>
<dd>Doesn't this duplicate Config-&gt;Access?  </dd>
<dt><a class="anchor" id="_todo000017"></a>Member <a class="el" href="classpkgAcquire_1_1Worker.xhtml#a849bc65c54e1bcbe8a7f053ce2cec672">pkgAcquire::Worker::InReady</a>  </dt>
<dd>Is this right? It's a guess.  </dd>
<dt><a class="anchor" id="_todo000015"></a>Member <a class="el" href="classpkgAcquire_1_1Worker.xhtml#a70b012fdfb38bfe94b52924d45c5462d">pkgAcquire::Worker::NextQueue</a>  </dt>
<dd>This is always NULL; is it just for future use?  </dd>
<dt><a class="anchor" id="_todo000019"></a>Member <a class="el" href="classpkgAcquire_1_1Worker.xhtml#a27ee7762ef1caaf3ec8c3598c15e7886">pkgAcquire::Worker::OutQueue</a>  </dt>
<dd>Wouldn't a std::dequeue be more appropriate?  </dd>
<dt><a class="anchor" id="_todo000018"></a>Member <a class="el" href="classpkgAcquire_1_1Worker.xhtml#a0b8717fb6d062212c251900cee4e6004">pkgAcquire::Worker::OutReady</a>  </dt>
<dd>Is this right?  </dd>
<dt><a class="anchor" id="_todo000020"></a>Member <a class="el" href="classpkgAcquire_1_1Worker.xhtml#a26a68d57a249a042c1e32186ce2fce8b">pkgAcquire::Worker::RunMessages</a>  ()</dt>
<dd><p class="startdd">Several message types lack separate handlers.</p>
<p class="enddd">will we need this as well?  </p>
</dd>
<dt><a class="anchor" id="_todo000026"></a>Member <a class="el" href="classpkgAcquire.xhtml#adfb69296d9a50a92927df7c30e56be2e">pkgAcquire::Workers</a>  </dt>
<dd>why a hand-managed list of workers instead of std::list or std::set?  </dd>
<dt><a class="anchor" id="_todo000024"></a>Class <a class="el" href="classpkgAcquireStatus.xhtml">pkgAcquireStatus</a>  </dt>
<dd>Why protected members?  </dd>
<dt><a class="anchor" id="_todo000034"></a>Member <a class="el" href="classpkgAcquireStatus.xhtml#a61c6f568f6582836223430d117a62e69">pkgAcquireStatus::MediaChange</a>  (std::string Media, std::string Drive)=0</dt>
<dd>This is a horrible blocking monster; it should be CPSed with prejudice.  </dd>
<dt><a class="anchor" id="_todo000065"></a>Member <a class="el" href="structpkgCache_1_1DescFile.xhtml#adc25a45dd4fc0985b33c968068f749c4">pkgCache::DescFile::Size</a>  </dt>
<dd>document <a class="el" href="structpkgCache_1_1DescFile.xhtml#adc25a45dd4fc0985b33c968068f749c4">pkgCache::DescFile::Size</a>  </dd>
<dt><a class="anchor" id="_todo000066"></a>Member <a class="el" href="structpkgCache_1_1Description.xhtml#a4b6b2b9ea64d554abffb8e2897932892">pkgCache::Description::FileList</a>  </dt>
<dd>document <a class="el" href="structpkgCache_1_1Description.xhtml#a4b6b2b9ea64d554abffb8e2897932892">pkgCache::Description::FileList</a>  </dd>
<dt><a class="anchor" id="_todo000063"></a>Member <a class="el" href="structpkgCache_1_1PackageFile.xhtml#a15eb852dd5568416ca012c6dcbff021b">pkgCache::PackageFile::Flags</a>  </dt>
<dd>document PackageFile::Flags  </dd>
<dt><a class="anchor" id="_todo000062"></a>Member <a class="el" href="structpkgCache_1_1PackageFile.xhtml#acfb626396ca6145d7ad40913ae1e5e30">pkgCache::PackageFile::IndexType</a>  </dt>
<dd>enumerate at least the possible indexes  </dd>
<dt><a class="anchor" id="_todo000064"></a>Member <a class="el" href="structpkgCache_1_1VerFile.xhtml#adc25a45dd4fc0985b33c968068f749c4">pkgCache::VerFile::Size</a>  </dt>
<dd>document <a class="el" href="structpkgCache_1_1VerFile.xhtml#adc25a45dd4fc0985b33c968068f749c4">pkgCache::VerFile::Size</a>  </dd>
<dt><a class="anchor" id="_todo000041"></a>Member <a class="el" href="classpkgCdrom.xhtml#a6d1bdb3f763da1f0a388888f206a50a6">pkgCdrom::Add</a>  (<a class="el" href="classpkgCdromStatus.xhtml">pkgCdromStatus</a> *log)</dt>
<dd>We ignore stat() errors here as we usually have only one of those in use  </dd>
<dt><a class="anchor" id="_todo000055"></a>Member <a class="el" href="classpkgDepCache.xhtml#a1ab9378572dc74fc8088fd690d494570">pkgDepCache::GetRootSetFunc</a>  ()</dt>
<dd>Is this the best place for this function? Perhaps the settings for mark-and-sweep should be stored in a single external class?  </dd>
<dt><a class="anchor" id="_todo000053"></a>Member <a class="el" href="classpkgDepCache.xhtml#aab6b1c53f7766ad618b80ebee701b60d">pkgDepCache::MarkInstall</a>  (PkgIterator const &amp;Pkg, bool AutoInst=true, unsigned long Depth=0, bool FromUser=true, bool ForceImportantDeps=false)</dt>
<dd>Should we handle or-group better here?  </dd>
<dt><a class="anchor" id="_todo000054"></a>Member <a class="el" href="classpkgDepCache_1_1Policy.xhtml#abec8ff6462cd8e729dcadf1014871d84">pkgDepCache::Policy::IsImportantDep</a>  (DepIterator const &amp;Dep)</dt>
<dd>this is a meant as a temporarly solution until the  </dd>
<dt><a class="anchor" id="_todo000052"></a>Member <a class="el" href="classpkgDPkgPM.xhtml#ade32ae89beefea58d4602f0d8668df6a">pkgDPkgPM::GoNoABIBreak</a>  (<a class="el" href="classAPT_1_1Progress_1_1PackageManager.xhtml">APT::Progress::PackageManager</a> *progress)</dt>
<dd>move this to a function or something, looks ugly here  </dd>
<dt><a class="anchor" id="_todo000050"></a>Member <a class="el" href="classpkgDPkgPM.xhtml#a367828235aced7bf124b0cd6827d9a2d">pkgDPkgPM::OpenLog</a>  ()</dt>
<dd>use a better string after freeze  </dd>
<dt><a class="anchor" id="_todo000048"></a>Member <a class="el" href="classpkgDPkgPM.xhtml#a6be54fa1743a469c0119ed27ee6e1087">pkgDPkgPM::ProcessDpkgStatusLine</a>  (char *line)</dt>
<dd><p class="startdd">this needs a muliarch testcase </p>
<p class="enddd">2: is "pkgname" here reliable with dpkg only sending us  </p>
</dd>
<dt><a class="anchor" id="_todo000061"></a>Member <a class="el" href="classpkgPackageManager.xhtml#a03c6f883f1372113b52ddbff519b81b6">pkgPackageManager::SmartUnPack</a>  (PkgIterator Pkg) APT_MUSTCHECK</dt>
<dd>merge on abi break  </dd>
<dt><a class="anchor" id="_todo000067"></a>Member <a class="el" href="classpkgPolicy.xhtml#a09125a1b5560d8c43c8e669560663a7d">pkgPolicy::pkgPolicy</a>  (<a class="el" href="classpkgCache.xhtml">pkgCache</a> *Owner)</dt>
<dd>make ExpressionMatches static to use it here easily  </dd>
<dt><a class="anchor" id="_todo000068"></a>Member <a class="el" href="classpkgSrcRecords_1_1Parser.xhtml#a3197f435b17e87aaab7fe2e798444c03">pkgSrcRecords::Parser::BuildDepends</a>  (std::vector&lt; BuildDepRec &gt; &amp;BuildDeps, bool const &amp;ArchOnly, bool const &amp;StripMultiArch=true)=0</dt>
<dd>Add a parameter to specify which architecture to use for [wildcard] matching  </dd>
<dt><a class="anchor" id="_todo000056"></a>Member <a class="el" href="classSigVerify.xhtml#a490c2d5199afc84532e9d4a41f2de667">SigVerify::CopyAndVerify</a>  (std::string CDROM, std::string Name, std::vector&lt; std::string &gt; &amp;SigList, std::vector&lt; std::string &gt; PkgList, std::vector&lt; std::string &gt; SrcList)</dt>
<dd><p class="startdd">delete any existing gpg file? </p>
<p class="enddd">delete any existing gpg file?  </p>
</dd>
<dt><a class="anchor" id="_todo000040"></a>Member <a class="el" href="classAPT_1_1VersionContainer.xhtml#aff88043b8fd94b37279562c24739d9e5">VersionContainer&lt; Container &gt;::erase</a>  (iterator position)</dt>
<dd>on ABI break, replace the first with the second without bool </dd>
</dl>
</div></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.6
</small></address>
</body>
</html>
