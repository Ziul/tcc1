<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.6"/>
<title>apt: apt-pkg/cacheiterators.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">apt
   &#160;<span id="projectnumber">1.0.9.2</span>
   </div>
   <div id="projectbrief">commandline package manager</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.6 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="modules.xhtml"><span>Modules</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
    </ul>
  </div>
<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_18f22d4be2ca84c350e120b6506056ca.xhtml">apt-pkg</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">cacheiterators.h</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">// -*- mode: cpp; mode: fold -*-</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">// Description                                                          /*{{{*/</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">/* ######################################################################</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">   </span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment">   Cache Iterators - Iterators for navigating the cache structure</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment">   </span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment">   The iterators all provides ++,==,!=,-&gt;,* and end for their type.</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment">   The end function can be used to tell if the list has been fully</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment">   traversed.</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment">   </span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment">   Unlike STL iterators these contain helper functions to access the data</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment">   that is being iterated over. This is because the data structures can&#39;t</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment">   be formed in a manner that is intuitive to use and also mmapable.</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment">   </span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment">   For each variable in the target structure that would need a translation</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment">   to be accessed correctly a translating function of the same name is</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment">   present in the iterator. If applicable the translating function will</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment">   return an iterator.</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment">   The DepIterator can iterate over two lists, a list of &#39;version depends&#39;</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment">   or a list of &#39;package reverse depends&#39;. The type is determined by the</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment">   structure passed to the constructor, which should be the structure</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment">   that has the depends pointer as a member. The provide iterator has the</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="comment">   same system.</span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="comment">   </span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="comment">   This header is not user includable, please use apt-pkg/pkgcache.h</span></div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="comment">   </span></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="comment">   ##################################################################### */</span></div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;                                                                        <span class="comment">/*}}}*/</span></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#ifndef PKGLIB_CACHEITERATORS_H</span></div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define PKGLIB_CACHEITERATORS_H</span></div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#include&lt;<a class="code" href="pkgcache_8h.xhtml">apt-pkg/pkgcache.h</a>&gt;</span></div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor">#include&lt;apt-pkg/macros.h&gt;</span></div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="preprocessor">#include&lt;iterator&gt;</span></div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="preprocessor">#include &lt;iosfwd&gt;</span></div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="preprocessor">#include &lt;string&gt;</span></div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="preprocessor">#include&lt;string.h&gt;</span></div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="comment">// abstract Iterator template                                           /*{{{*/</span></div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="comment">/* This template provides the very basic iterator methods we</span></div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="comment">   need to have for doing some walk-over-the-cache magic */</span></div>
<div class="line"><a name="l00044"></a><span class="lineno"><a class="line" href="classpkgCache_1_1Iterator.xhtml">   44</a></span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> Str, <span class="keyword">typename</span> Itr&gt; <span class="keyword">class </span><a class="code" href="classpkgCache_1_1Iterator.xhtml">pkgCache::Iterator</a> :</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;                        <span class="keyword">public</span> std::iterator&lt;std::forward_iterator_tag, Str&gt; {</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;        <span class="keyword">protected</span>:</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;        Str *S;</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;        <a class="code" href="classpkgCache.xhtml">pkgCache</a> *Owner;</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;        <span class="keyword">virtual</span> Str* <a class="code" href="classpkgCache_1_1Iterator.xhtml#ac5f859168a3ef5a04d97c141fdb6d80d">OwnerPointer</a>() <span class="keyword">const</span> = 0;</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;        <span class="keyword">public</span>:</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;        <span class="comment">// Iteration</span></div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;        <span class="keyword">virtual</span> <span class="keywordtype">void</span> operator ++(<span class="keywordtype">int</span>) = 0;</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;        <span class="keyword">virtual</span> <span class="keywordtype">void</span> operator ++() = 0; <span class="comment">// Should be {operator ++(0);}</span></div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        <span class="keyword">inline</span> <span class="keywordtype">bool</span> end()<span class="keyword"> const </span>{<span class="keywordflow">return</span> Owner == 0 || S == <a class="code" href="classpkgCache_1_1Iterator.xhtml#ac5f859168a3ef5a04d97c141fdb6d80d">OwnerPointer</a>();}</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;        <span class="comment">// Comparison</span></div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;        <span class="keyword">inline</span> <span class="keywordtype">bool</span> operator ==(<span class="keyword">const</span> Itr &amp;B)<span class="keyword"> const </span>{<span class="keywordflow">return</span> S == B.S;}</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;        <span class="keyword">inline</span> <span class="keywordtype">bool</span> operator !=(<span class="keyword">const</span> Itr &amp;B)<span class="keyword"> const </span>{<span class="keywordflow">return</span> S != B.S;}</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;        <span class="comment">// Accessors</span></div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        <span class="keyword">inline</span> Str *operator -&gt;() {<span class="keywordflow">return</span> S;}</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;        <span class="keyword">inline</span> Str <span class="keyword">const</span> *operator -&gt;()<span class="keyword"> const </span>{<span class="keywordflow">return</span> S;}</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;        <span class="keyword">inline</span> <span class="keyword">operator</span> Str *() {<span class="keywordflow">return</span> S == <a class="code" href="classpkgCache_1_1Iterator.xhtml#ac5f859168a3ef5a04d97c141fdb6d80d">OwnerPointer</a>() ? 0 : S;}</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;        <span class="keyword">inline</span> <span class="keyword">operator</span> Str <span class="keyword">const</span> *() <span class="keyword">const</span> {<span class="keywordflow">return</span> S == <a class="code" href="classpkgCache_1_1Iterator.xhtml#ac5f859168a3ef5a04d97c141fdb6d80d">OwnerPointer</a>() ? 0 : S;}</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;        <span class="keyword">inline</span> Str &amp;operator *() {<span class="keywordflow">return</span> *S;}</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;        <span class="keyword">inline</span> Str <span class="keyword">const</span> &amp;operator *()<span class="keyword"> const </span>{<span class="keywordflow">return</span> *S;}</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;        <span class="keyword">inline</span> <a class="code" href="classpkgCache.xhtml">pkgCache</a> *Cache()<span class="keyword"> const </span>{<span class="keywordflow">return</span> Owner;}</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;        <span class="comment">// Mixed stuff</span></div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;        <span class="keyword">inline</span> <span class="keywordtype">void</span> operator =(<span class="keyword">const</span> Itr &amp;B) {S = B.S; Owner = B.Owner;}</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;        <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsGood()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> S &amp;&amp; Owner &amp;&amp; ! end();}</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;        <span class="keyword">inline</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> Index()<span class="keyword"> const </span>{<span class="keywordflow">return</span> S - <a class="code" href="classpkgCache_1_1Iterator.xhtml#ac5f859168a3ef5a04d97c141fdb6d80d">OwnerPointer</a>();}</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;        <span class="keywordtype">void</span> ReMap(<span class="keywordtype">void</span> <span class="keyword">const</span> * <span class="keyword">const</span> oldMap, <span class="keywordtype">void</span> <span class="keyword">const</span> * <span class="keyword">const</span> newMap) {</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;                <span class="keywordflow">if</span> (Owner == 0 || S == 0)</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;                        <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;                S += (Str <span class="keyword">const</span> * <span class="keyword">const</span>)(newMap) - (Str <span class="keyword">const</span> * <span class="keyword">const</span>)(oldMap);</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;        }</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;        <span class="comment">// Constructors - look out for the variable assigning</span></div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;        <span class="keyword">inline</span> <a class="code" href="classpkgCache_1_1Iterator.xhtml">Iterator</a>() : S(0), Owner(0) {}</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;        <span class="keyword">inline</span> <a class="code" href="classpkgCache_1_1Iterator.xhtml">Iterator</a>(<a class="code" href="classpkgCache.xhtml">pkgCache</a> &amp;Owner,Str *T = 0) : S(T), Owner(&amp;Owner) {}</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;};</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;                                                                        <span class="comment">/*}}}*/</span></div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;<span class="comment">// Group Iterator                                                       /*{{{*/</span></div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;<span class="comment">/* Packages with the same name are collected in a Group so someone only</span></div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;<span class="comment">   interest in package names can iterate easily over the names, so the</span></div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;<span class="comment">   different architectures can be treated as of the &quot;same&quot; package</span></div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;<span class="comment">   (apt internally treat them as totally different packages) */</span></div>
<div class="line"><a name="l00100"></a><span class="lineno"><a class="line" href="classpkgCache_1_1GrpIterator.xhtml">  100</a></span>&#160;<span class="keyword">class </span><a class="code" href="classpkgCache_1_1GrpIterator.xhtml">pkgCache::GrpIterator</a>: <span class="keyword">public</span> <a class="code" href="classpkgCache_1_1Iterator.xhtml">Iterator</a>&lt;Group, GrpIterator&gt; {</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;        <span class="keywordtype">long</span> HashIndex;</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;        <span class="keyword">protected</span>:</div>
<div class="line"><a name="l00104"></a><span class="lineno"><a class="line" href="classpkgCache_1_1GrpIterator.xhtml#a70e5123456c1a2d4f4b211bb74764c0e">  104</a></span>&#160;        <span class="keyword">inline</span> <a class="code" href="structpkgCache_1_1Group.xhtml">Group</a>* <a class="code" href="classpkgCache_1_1GrpIterator.xhtml#a70e5123456c1a2d4f4b211bb74764c0e">OwnerPointer</a>()<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;                <span class="keywordflow">return</span> (Owner != 0) ? Owner-&gt;GrpP : 0;</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;        }</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;        <span class="keyword">public</span>:</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;        <span class="comment">// This constructor is the &#39;begin&#39; constructor, never use it.</span></div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;        <span class="keyword">inline</span> <a class="code" href="classpkgCache_1_1GrpIterator.xhtml">GrpIterator</a>(<a class="code" href="classpkgCache.xhtml">pkgCache</a> &amp;Owner) : <a class="code" href="classpkgCache_1_1Iterator.xhtml">Iterator</a>&lt;<a class="code" href="structpkgCache_1_1Group.xhtml">Group</a>, <a class="code" href="classpkgCache_1_1GrpIterator.xhtml">GrpIterator</a>&gt;(Owner), HashIndex(-1) {</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;                S = <a class="code" href="classpkgCache_1_1GrpIterator.xhtml#a70e5123456c1a2d4f4b211bb74764c0e">OwnerPointer</a>();</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;                operator ++(0);</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;        }</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;        <span class="keyword">virtual</span> <span class="keywordtype">void</span> operator ++(<span class="keywordtype">int</span>);</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;        <span class="keyword">virtual</span> <span class="keywordtype">void</span> operator ++() {operator ++(0);}</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;        <span class="keyword">inline</span> <span class="keyword">const</span> <span class="keywordtype">char</span> *Name()<span class="keyword"> const </span>{<span class="keywordflow">return</span> S-&gt;<a class="code" href="structpkgCache_1_1Group.xhtml#a003b2b80c083e7b91263d147956addcf">Name</a> == 0?0:Owner-&gt;StrP + S-&gt;<a class="code" href="structpkgCache_1_1Group.xhtml#a003b2b80c083e7b91263d147956addcf">Name</a>;}</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;        <span class="keyword">inline</span> PkgIterator PackageList() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;        PkgIterator FindPkg(std::string Arch = <span class="stringliteral">&quot;any&quot;</span>) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;        PkgIterator <a class="code" href="classpkgCache_1_1GrpIterator.xhtml#a98f2f26c25e18247f674d7be4537b841">FindPreferredPkg</a>(<span class="keywordtype">bool</span> <span class="keyword">const</span> &amp;PreferNonVirtual = <span class="keyword">true</span>) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;        PkgIterator NextPkg(PkgIterator <span class="keyword">const</span> &amp;Pkg) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;        <span class="comment">// Constructors</span></div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;        <span class="keyword">inline</span> GrpIterator(<a class="code" href="classpkgCache.xhtml">pkgCache</a> &amp;Owner, Group *Trg) : Iterator&lt;Group, GrpIterator&gt;(Owner, Trg), HashIndex(0) {</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;                <span class="keywordflow">if</span> (S == 0)</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;                        S = <a class="code" href="classpkgCache_1_1GrpIterator.xhtml#a70e5123456c1a2d4f4b211bb74764c0e">OwnerPointer</a>();</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;        }</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;        <span class="keyword">inline</span> GrpIterator() : Iterator&lt;Group, GrpIterator&gt;(), HashIndex(0) {}</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;};</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;                                                                        <span class="comment">/*}}}*/</span></div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;<span class="comment">// Package Iterator                                                     /*{{{*/</span></div>
<div class="line"><a name="l00141"></a><span class="lineno"><a class="line" href="classpkgCache_1_1PkgIterator.xhtml">  141</a></span>&#160;<span class="keyword">class </span><a class="code" href="classpkgCache_1_1PkgIterator.xhtml">pkgCache::PkgIterator</a>: <span class="keyword">public</span> <a class="code" href="classpkgCache_1_1Iterator.xhtml">Iterator</a>&lt;Package, PkgIterator&gt; {</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;        <span class="keywordtype">long</span> HashIndex;</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;        <span class="keyword">protected</span>:</div>
<div class="line"><a name="l00145"></a><span class="lineno"><a class="line" href="classpkgCache_1_1PkgIterator.xhtml#a3e8ef83055cfa1239167f151b6a76535">  145</a></span>&#160;        <span class="keyword">inline</span> <a class="code" href="structpkgCache_1_1Package.xhtml">Package</a>* <a class="code" href="classpkgCache_1_1PkgIterator.xhtml#a3e8ef83055cfa1239167f151b6a76535">OwnerPointer</a>()<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;                <span class="keywordflow">return</span> (Owner != 0) ? Owner-&gt;PkgP : 0;</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;        }</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;        <span class="keyword">public</span>:</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;        <span class="comment">// This constructor is the &#39;begin&#39; constructor, never use it.</span></div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;        <span class="keyword">inline</span> <a class="code" href="classpkgCache_1_1PkgIterator.xhtml">PkgIterator</a>(<a class="code" href="classpkgCache.xhtml">pkgCache</a> &amp;Owner) : <a class="code" href="classpkgCache_1_1Iterator.xhtml">Iterator</a>&lt;<a class="code" href="structpkgCache_1_1Package.xhtml">Package</a>, <a class="code" href="classpkgCache_1_1PkgIterator.xhtml">PkgIterator</a>&gt;(Owner), HashIndex(-1) {</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;                S = <a class="code" href="classpkgCache_1_1PkgIterator.xhtml#a3e8ef83055cfa1239167f151b6a76535">OwnerPointer</a>();</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;                operator ++(0);</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;        }</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;        <span class="keyword">virtual</span> <span class="keywordtype">void</span> operator ++(<span class="keywordtype">int</span>);</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;        <span class="keyword">virtual</span> <span class="keywordtype">void</span> operator ++() {operator ++(0);}</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;        <span class="keyword">enum</span> OkState {NeedsNothing,NeedsUnpack,NeedsConfigure};</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;        <span class="comment">// Accessors</span></div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;        <span class="keyword">inline</span> <span class="keyword">const</span> <span class="keywordtype">char</span> *Name()<span class="keyword"> const </span>{<span class="keywordflow">return</span> S-&gt;<a class="code" href="structpkgCache_1_1Package.xhtml#a003b2b80c083e7b91263d147956addcf">Name</a> == 0?0:Owner-&gt;StrP + S-&gt;<a class="code" href="structpkgCache_1_1Package.xhtml#a003b2b80c083e7b91263d147956addcf">Name</a>;}</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;        <span class="keyword">inline</span> <span class="keyword">const</span> <span class="keywordtype">char</span> *Section()<span class="keyword"> const </span>{<span class="keywordflow">return</span> S-&gt;<a class="code" href="structpkgCache_1_1Package.xhtml#a4bb6ae3e0b912e661c9589ec803b67c3">Section</a> == 0?0:Owner-&gt;StrP + S-&gt;<a class="code" href="structpkgCache_1_1Package.xhtml#a4bb6ae3e0b912e661c9589ec803b67c3">Section</a>;}</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;        <span class="keyword">inline</span> <span class="keywordtype">bool</span> Purge()<span class="keyword"> const </span>{<span class="keywordflow">return</span> S-&gt;<a class="code" href="structpkgCache_1_1Package.xhtml#a2682fe5679606457c71fdaccc9642201">CurrentState</a> == pkgCache::State::Purge ||</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;                (S-&gt;<a class="code" href="structpkgCache_1_1Package.xhtml#a344440386fa2d17bc8476798d3373b78">CurrentVer</a> == 0 &amp;&amp; S-&gt;<a class="code" href="structpkgCache_1_1Package.xhtml#a2682fe5679606457c71fdaccc9642201">CurrentState</a> == pkgCache::State::NotInstalled);}</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;        <span class="keyword">inline</span> <span class="keyword">const</span> <span class="keywordtype">char</span> *Arch()<span class="keyword"> const </span>{<span class="keywordflow">return</span> S-&gt;<a class="code" href="structpkgCache_1_1Package.xhtml#a2e910588b2690a85a3df03019b908ee4">Arch</a> == 0?0:Owner-&gt;StrP + S-&gt;<a class="code" href="structpkgCache_1_1Package.xhtml#a2e910588b2690a85a3df03019b908ee4">Arch</a>;}</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;        <span class="keyword">inline</span> APT_PURE GrpIterator Group()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> GrpIterator(*Owner, Owner-&gt;GrpP + S-&gt;<a class="code" href="structpkgCache_1_1Package.xhtml#ac37594153b8d9ceda78b60334b7ada1f">Group</a>);}</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;        <span class="keyword">inline</span> VerIterator VersionList() const APT_PURE;</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;        inline VerIterator CurrentVer() const APT_PURE;</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;        inline DepIterator RevDependsList() const APT_PURE;</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;        inline PrvIterator ProvidesList() const APT_PURE;</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;        OkState State() const APT_PURE;</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;        const <span class="keywordtype">char</span> *CandVersion() const APT_PURE;</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;        const <span class="keywordtype">char</span> *CurVersion() const APT_PURE;</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;        <span class="comment">//Nice printable representation</span></div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;        friend std::ostream&amp; operator &lt;&lt;(std::ostream&amp; out, PkgIterator i);</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;        std::<span class="keywordtype">string</span> FullName(<span class="keywordtype">bool</span> const &amp;Pretty = false) const;</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;        <span class="comment">// Constructors</span></div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;        inline PkgIterator(<a class="code" href="classpkgCache.xhtml">pkgCache</a> &amp;Owner,Package *Trg) : Iterator&lt;Package, PkgIterator&gt;(Owner, Trg), HashIndex(0) {</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;                <span class="keywordflow">if</span> (S == 0)</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;                        S = <a class="code" href="classpkgCache_1_1PkgIterator.xhtml#a3e8ef83055cfa1239167f151b6a76535">OwnerPointer</a>();</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;        }</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;        <span class="keyword">inline</span> PkgIterator() : Iterator&lt;Package, PkgIterator&gt;(), HashIndex(0) {}</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;};</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;                                                                        <span class="comment">/*}}}*/</span></div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;<span class="comment">// Version Iterator                                                     /*{{{*/</span></div>
<div class="line"><a name="l00190"></a><span class="lineno"><a class="line" href="classpkgCache_1_1VerIterator.xhtml">  190</a></span>&#160;<span class="keyword">class </span><a class="code" href="classpkgCache_1_1VerIterator.xhtml">pkgCache::VerIterator</a> : <span class="keyword">public</span> <a class="code" href="classpkgCache_1_1Iterator.xhtml">Iterator</a>&lt;Version, VerIterator&gt; {</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;        <span class="keyword">protected</span>:</div>
<div class="line"><a name="l00192"></a><span class="lineno"><a class="line" href="classpkgCache_1_1VerIterator.xhtml#a6b354a7d168889fafd04a8e6b69efbfa">  192</a></span>&#160;        <span class="keyword">inline</span> <a class="code" href="structpkgCache_1_1Version.xhtml">Version</a>* <a class="code" href="classpkgCache_1_1VerIterator.xhtml#a6b354a7d168889fafd04a8e6b69efbfa">OwnerPointer</a>()<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;                <span class="keywordflow">return</span> (Owner != 0) ? Owner-&gt;VerP : 0;</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;        }</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;        <span class="keyword">public</span>:</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;        <span class="comment">// Iteration</span></div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;        <span class="keywordtype">void</span> operator ++(<span class="keywordtype">int</span>) {<span class="keywordflow">if</span> (S != Owner-&gt;VerP) S = Owner-&gt;VerP + S-&gt;<a class="code" href="structpkgCache_1_1Version.xhtml#a03383f42381ce6ad45332685ed49ff14">NextVer</a>;}</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;        <span class="keyword">inline</span> <span class="keywordtype">void</span> operator ++() {operator ++(0);}</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;        <span class="comment">// Comparison</span></div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;        <span class="keywordtype">int</span> CompareVer(<span class="keyword">const</span> VerIterator &amp;B) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00207"></a><span class="lineno"><a class="line" href="classpkgCache_1_1VerIterator.xhtml#a89a7f2dec86e520aa1b15dcf52e6ab23">  207</a></span>&#160;        <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="classpkgCache_1_1VerIterator.xhtml#a89a7f2dec86e520aa1b15dcf52e6ab23">SimilarVer</a>(<span class="keyword">const</span> <a class="code" href="classpkgCache_1_1VerIterator.xhtml">VerIterator</a> &amp;B)<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;                <span class="keywordflow">return</span> (B.end() == <span class="keyword">false</span> &amp;&amp; S-&gt;<a class="code" href="structpkgCache_1_1Version.xhtml#a2018824a2cde40fcad75f5066bb5708b">Hash</a> == B-&gt;Hash &amp;&amp; strcmp(VerStr(), B.VerStr()) == 0);</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;        }</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;        <span class="comment">// Accessors</span></div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;        <span class="keyword">inline</span> <span class="keyword">const</span> <span class="keywordtype">char</span> *VerStr()<span class="keyword"> const </span>{<span class="keywordflow">return</span> S-&gt;<a class="code" href="structpkgCache_1_1Version.xhtml#ade3263d852bd30195ec60324aea7f9d9">VerStr</a> == 0?0:Owner-&gt;StrP + S-&gt;<a class="code" href="structpkgCache_1_1Version.xhtml#ade3263d852bd30195ec60324aea7f9d9">VerStr</a>;}</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;        <span class="keyword">inline</span> <span class="keyword">const</span> <span class="keywordtype">char</span> *Section()<span class="keyword"> const </span>{<span class="keywordflow">return</span> S-&gt;<a class="code" href="structpkgCache_1_1Version.xhtml#a4bb6ae3e0b912e661c9589ec803b67c3">Section</a> == 0?0:Owner-&gt;StrP + S-&gt;<a class="code" href="structpkgCache_1_1Version.xhtml#a4bb6ae3e0b912e661c9589ec803b67c3">Section</a>;}</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;        <span class="keyword">inline</span> <span class="keyword">const</span> <span class="keywordtype">char</span> *Arch()<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;                <span class="keywordflow">if</span> ((S-&gt;<a class="code" href="structpkgCache_1_1Version.xhtml#aa135f00c62252418b2ed5c85f7643851">MultiArch</a> &amp; <a class="code" href="structpkgCache_1_1Version.xhtml#a8324be5b5e844cc9e33d3924da11025fa54991d225c58ce0af43461d4e9a82312">pkgCache::Version::All</a>) == <a class="code" href="structpkgCache_1_1Version.xhtml#a8324be5b5e844cc9e33d3924da11025fa54991d225c58ce0af43461d4e9a82312">pkgCache::Version::All</a>)</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;                        <span class="keywordflow">return</span> <span class="stringliteral">&quot;all&quot;</span>;</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;                <span class="keywordflow">return</span> S-&gt;<a class="code" href="structpkgCache_1_1Version.xhtml#a8b21c48cbc2c531761a089792265a43c">ParentPkg</a> == 0?0:Owner-&gt;StrP + ParentPkg()-&gt;Arch;</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;        }</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;        <span class="keyword">inline</span> PkgIterator ParentPkg()<span class="keyword"> const </span>{<span class="keywordflow">return</span> PkgIterator(*Owner,Owner-&gt;PkgP + S-&gt;<a class="code" href="structpkgCache_1_1Version.xhtml#a8b21c48cbc2c531761a089792265a43c">ParentPkg</a>);}</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;        <span class="keyword">inline</span> DescIterator DescriptionList() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;        DescIterator TranslatedDescription() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;        <span class="keyword">inline</span> DepIterator DependsList() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;        <span class="keyword">inline</span> PrvIterator ProvidesList() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;        <span class="keyword">inline</span> VerFileIterator FileList() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;        <span class="keywordtype">bool</span> Downloadable() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;        <span class="keyword">inline</span> <span class="keyword">const</span> <span class="keywordtype">char</span> *PriorityType()<span class="keyword"> const </span>{<span class="keywordflow">return</span> Owner-&gt;Priority(S-&gt;<a class="code" href="structpkgCache_1_1Version.xhtml#a7a5a6ba669ced07014f8651ce95b4590">Priority</a>);}</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">char</span> *MultiArchType() const APT_PURE;</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;        std::<span class="keywordtype">string</span> RelStr() const;</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;        <span class="keywordtype">bool</span> Automatic() const;</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;        VerFileIterator NewestFile() const;</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;        inline VerIterator(<a class="code" href="classpkgCache.xhtml">pkgCache</a> &amp;Owner,Version *Trg = 0) : Iterator&lt;Version, VerIterator&gt;(Owner, Trg) {</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;                <span class="keywordflow">if</span> (S == 0)</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;                        S = <a class="code" href="classpkgCache_1_1VerIterator.xhtml#a6b354a7d168889fafd04a8e6b69efbfa">OwnerPointer</a>();</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;        }</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;        <span class="keyword">inline</span> VerIterator() : Iterator&lt;Version, VerIterator&gt;() {}</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;};</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;                                                                        <span class="comment">/*}}}*/</span></div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;<span class="comment">// Description Iterator                                                 /*{{{*/</span></div>
<div class="line"><a name="l00242"></a><span class="lineno"><a class="line" href="classpkgCache_1_1DescIterator.xhtml">  242</a></span>&#160;<span class="keyword">class </span><a class="code" href="classpkgCache_1_1DescIterator.xhtml">pkgCache::DescIterator</a> : <span class="keyword">public</span> <a class="code" href="classpkgCache_1_1Iterator.xhtml">Iterator</a>&lt;Description, DescIterator&gt; {</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;        <span class="keyword">protected</span>:</div>
<div class="line"><a name="l00244"></a><span class="lineno"><a class="line" href="classpkgCache_1_1DescIterator.xhtml#a9bbac2719784482c2a19979e106c296b">  244</a></span>&#160;        <span class="keyword">inline</span> <a class="code" href="structpkgCache_1_1Description.xhtml">Description</a>* <a class="code" href="classpkgCache_1_1DescIterator.xhtml#a9bbac2719784482c2a19979e106c296b">OwnerPointer</a>()<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;                <span class="keywordflow">return</span> (Owner != 0) ? Owner-&gt;DescP : 0;</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;        }</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;        <span class="keyword">public</span>:</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;        <span class="comment">// Iteration</span></div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;        <span class="keywordtype">void</span> operator ++(<span class="keywordtype">int</span>) {<span class="keywordflow">if</span> (S != Owner-&gt;DescP) S = Owner-&gt;DescP + S-&gt;<a class="code" href="structpkgCache_1_1Description.xhtml#ab6e4d8a0606196a6c3aa3f9c3f53ceff">NextDesc</a>;}</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;        <span class="keyword">inline</span> <span class="keywordtype">void</span> operator ++() {operator ++(0);}</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;        <span class="comment">// Comparison</span></div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;        <span class="keywordtype">int</span> CompareDesc(<span class="keyword">const</span> DescIterator &amp;B) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;        <span class="comment">// Accessors</span></div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;        <span class="keyword">inline</span> <span class="keyword">const</span> <span class="keywordtype">char</span> *LanguageCode()<span class="keyword"> const </span>{<span class="keywordflow">return</span> Owner-&gt;StrP + S-&gt;<a class="code" href="structpkgCache_1_1Description.xhtml#aa5570571c6d782791774e7864a752875">language_code</a>;}</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;        <span class="keyword">inline</span> <span class="keyword">const</span> <span class="keywordtype">char</span> *md5()<span class="keyword"> const </span>{<span class="keywordflow">return</span> Owner-&gt;StrP + S-&gt;<a class="code" href="structpkgCache_1_1Description.xhtml#a7959dbeebed3d0b4cc50c363908c58f0">md5sum</a>;}</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;        <span class="keyword">inline</span> DescFileIterator FileList() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;        <span class="keyword">inline</span> DescIterator() : Iterator&lt;Description, DescIterator&gt;() {}</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;        <span class="keyword">inline</span> DescIterator(<a class="code" href="classpkgCache.xhtml">pkgCache</a> &amp;Owner,Description *Trg = 0) : Iterator&lt;Description, DescIterator&gt;(Owner, Trg) {</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;                <span class="keywordflow">if</span> (S == 0)</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;                        S = Owner.DescP;</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;        }</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;};</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;                                                                        <span class="comment">/*}}}*/</span></div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;<span class="comment">// Dependency iterator                                                  /*{{{*/</span></div>
<div class="line"><a name="l00269"></a><span class="lineno"><a class="line" href="classpkgCache_1_1DepIterator.xhtml">  269</a></span>&#160;<span class="keyword">class </span><a class="code" href="classpkgCache_1_1DepIterator.xhtml">pkgCache::DepIterator</a> : <span class="keyword">public</span> <a class="code" href="classpkgCache_1_1Iterator.xhtml">Iterator</a>&lt;Dependency, DepIterator&gt; {</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;        <span class="keyword">enum</span> {DepVer, DepRev} Type;</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;        <span class="keyword">protected</span>:</div>
<div class="line"><a name="l00273"></a><span class="lineno"><a class="line" href="classpkgCache_1_1DepIterator.xhtml#ad8c9e49a8ee257a69302070d16c77e96">  273</a></span>&#160;        <span class="keyword">inline</span> <a class="code" href="structpkgCache_1_1Dependency.xhtml">Dependency</a>* <a class="code" href="classpkgCache_1_1DepIterator.xhtml#ad8c9e49a8ee257a69302070d16c77e96">OwnerPointer</a>()<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;                <span class="keywordflow">return</span> (Owner != 0) ? Owner-&gt;DepP : 0;</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;        }</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;        <span class="keyword">public</span>:</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;        <span class="comment">// Iteration</span></div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;        <span class="keywordtype">void</span> operator ++(<span class="keywordtype">int</span>) {<span class="keywordflow">if</span> (S != Owner-&gt;DepP) S = Owner-&gt;DepP +</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;                (Type == DepVer ? S-&gt;<a class="code" href="structpkgCache_1_1Dependency.xhtml#a7d4d8077c6c68703126e2785fb2ec7ee">NextDepends</a> : S-&gt;<a class="code" href="structpkgCache_1_1Dependency.xhtml#a67910351cd81079401bbc02407c79a75">NextRevDepends</a>);}</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;        <span class="keyword">inline</span> <span class="keywordtype">void</span> operator ++() {operator ++(0);}</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;        <span class="comment">// Accessors</span></div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;        <span class="keyword">inline</span> <span class="keyword">const</span> <span class="keywordtype">char</span> *TargetVer()<span class="keyword"> const </span>{<span class="keywordflow">return</span> S-&gt;<a class="code" href="structpkgCache_1_1Dependency.xhtml#a97bd57cd8f5c8df5fd909f8b59f0b71c">Version</a> == 0?0:Owner-&gt;StrP + S-&gt;<a class="code" href="structpkgCache_1_1Dependency.xhtml#a97bd57cd8f5c8df5fd909f8b59f0b71c">Version</a>;}</div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;        <span class="keyword">inline</span> PkgIterator TargetPkg()<span class="keyword"> const </span>{<span class="keywordflow">return</span> PkgIterator(*Owner,Owner-&gt;PkgP + S-&gt;<a class="code" href="structpkgCache_1_1Dependency.xhtml#a381dc2fed51edd65eb2193f8a4c42cc1">Package</a>);}</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;        <span class="keyword">inline</span> PkgIterator SmartTargetPkg()<span class="keyword"> const </span>{PkgIterator R(*Owner,0);SmartTargetPkg(R);<span class="keywordflow">return</span> R;}</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;        <span class="keyword">inline</span> VerIterator ParentVer()<span class="keyword"> const </span>{<span class="keywordflow">return</span> VerIterator(*Owner,Owner-&gt;VerP + S-&gt;<a class="code" href="structpkgCache_1_1Dependency.xhtml#a52f779a20efcbb37dccfbc495750adb5">ParentVer</a>);}</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;        <span class="keyword">inline</span> PkgIterator ParentPkg()<span class="keyword"> const </span>{<span class="keywordflow">return</span> PkgIterator(*Owner,Owner-&gt;PkgP + Owner-&gt;VerP[S-&gt;<a class="code" href="structpkgCache_1_1Dependency.xhtml#a52f779a20efcbb37dccfbc495750adb5">ParentVer</a>].<a class="code" href="structpkgCache_1_1Version.xhtml#a8b21c48cbc2c531761a089792265a43c">ParentPkg</a>);}</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;        <span class="keyword">inline</span> <span class="keywordtype">bool</span> Reverse()<span class="keyword"> const </span>{<span class="keywordflow">return</span> Type == DepRev;}</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;        <span class="keywordtype">bool</span> IsCritical() const APT_PURE;</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;        <span class="keywordtype">bool</span> IsNegative() const APT_PURE;</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;        <span class="keywordtype">bool</span> IsIgnorable(PrvIterator const &amp;Prv) const APT_PURE;</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;        <span class="keywordtype">bool</span> IsIgnorable(PkgIterator const &amp;Pkg) const APT_PURE;</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;        <span class="keywordtype">bool</span> IsMultiArchImplicit() const APT_PURE;</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;        <span class="keywordtype">bool</span> IsSatisfied(VerIterator const &amp;Ver) const APT_PURE;</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;        <span class="keywordtype">bool</span> IsSatisfied(PrvIterator const &amp;Prv) const APT_PURE;</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;        <span class="keywordtype">void</span> GlobOr(DepIterator &amp;Start,DepIterator &amp;End);</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;        Version **AllTargets() const;</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;        <span class="keywordtype">bool</span> SmartTargetPkg(PkgIterator &amp;Result) const;</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;        inline const <span class="keywordtype">char</span> *CompType()<span class="keyword"> const </span>{<span class="keywordflow">return</span> Owner-&gt;CompType(S-&gt;<a class="code" href="structpkgCache_1_1Dependency.xhtml#a1710777a084deafa2b3022a64cd2f7a4">CompareOp</a>);}</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;        <span class="keyword">inline</span> <span class="keyword">const</span> <span class="keywordtype">char</span> *DepType()<span class="keyword"> const </span>{<span class="keywordflow">return</span> Owner-&gt;DepType(S-&gt;<a class="code" href="structpkgCache_1_1Dependency.xhtml#aa8450776ab620f8870aaee14ac1747fe">Type</a>);}</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;        <span class="comment">//Nice printable representation</span></div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;        <span class="keyword">friend</span> std::ostream&amp; operator &lt;&lt;(std::ostream&amp; out, DepIterator D);</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;        <span class="keyword">inline</span> DepIterator(<a class="code" href="classpkgCache.xhtml">pkgCache</a> &amp;Owner, Dependency *Trg, Version* = 0) :</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;                Iterator&lt;Dependency, DepIterator&gt;(Owner, Trg), Type(DepVer) {</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;                <span class="keywordflow">if</span> (S == 0)</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;                        S = Owner.DepP;</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;        }</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;        <span class="keyword">inline</span> DepIterator(<a class="code" href="classpkgCache.xhtml">pkgCache</a> &amp;Owner, Dependency *Trg, Package*) :</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;                Iterator&lt;Dependency, DepIterator&gt;(Owner, Trg), Type(DepRev) {</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;                <span class="keywordflow">if</span> (S == 0)</div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;                        S = Owner.DepP;</div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;        }</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;        <span class="keyword">inline</span> DepIterator() : Iterator&lt;Dependency, DepIterator&gt;(), Type(DepVer) {}</div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;};</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;                                                                        <span class="comment">/*}}}*/</span></div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;<span class="comment">// Provides iterator                                                    /*{{{*/</span></div>
<div class="line"><a name="l00320"></a><span class="lineno"><a class="line" href="classpkgCache_1_1PrvIterator.xhtml">  320</a></span>&#160;<span class="keyword">class </span><a class="code" href="classpkgCache_1_1PrvIterator.xhtml">pkgCache::PrvIterator</a> : <span class="keyword">public</span> <a class="code" href="classpkgCache_1_1Iterator.xhtml">Iterator</a>&lt;Provides, PrvIterator&gt; {</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;        <span class="keyword">enum</span> {PrvVer, PrvPkg} Type;</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;        <span class="keyword">protected</span>:</div>
<div class="line"><a name="l00324"></a><span class="lineno"><a class="line" href="classpkgCache_1_1PrvIterator.xhtml#adf802bef71749b98b8fc56753b6252fd">  324</a></span>&#160;        <span class="keyword">inline</span> <a class="code" href="structpkgCache_1_1Provides.xhtml">Provides</a>* <a class="code" href="classpkgCache_1_1PrvIterator.xhtml#adf802bef71749b98b8fc56753b6252fd">OwnerPointer</a>()<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;                <span class="keywordflow">return</span> (Owner != 0) ? Owner-&gt;ProvideP : 0;</div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;        }</div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;</div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;        <span class="keyword">public</span>:</div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;        <span class="comment">// Iteration</span></div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;        <span class="keywordtype">void</span> operator ++(<span class="keywordtype">int</span>) {<span class="keywordflow">if</span> (S != Owner-&gt;ProvideP) S = Owner-&gt;ProvideP +</div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;                (Type == PrvVer?S-&gt;<a class="code" href="structpkgCache_1_1Provides.xhtml#aa976e01a9218e6cc3c0119469ebf553a">NextPkgProv</a>:S-&gt;<a class="code" href="structpkgCache_1_1Provides.xhtml#a27f51ac6417a16977e3b0839f5997ef7">NextProvides</a>);}</div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;        <span class="keyword">inline</span> <span class="keywordtype">void</span> operator ++() {operator ++(0);}</div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;</div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;        <span class="comment">// Accessors</span></div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;        <span class="keyword">inline</span> <span class="keyword">const</span> <span class="keywordtype">char</span> *Name()<span class="keyword"> const </span>{<span class="keywordflow">return</span> Owner-&gt;StrP + Owner-&gt;PkgP[S-&gt;<a class="code" href="structpkgCache_1_1Provides.xhtml#a8b21c48cbc2c531761a089792265a43c">ParentPkg</a>].<a class="code" href="structpkgCache_1_1Package.xhtml#a003b2b80c083e7b91263d147956addcf">Name</a>;}</div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;        <span class="keyword">inline</span> <span class="keyword">const</span> <span class="keywordtype">char</span> *ProvideVersion()<span class="keyword"> const </span>{<span class="keywordflow">return</span> S-&gt;<a class="code" href="structpkgCache_1_1Provides.xhtml#a32c06e1fb98eeaa5229f84cfb70d4fb6">ProvideVersion</a> == 0?0:Owner-&gt;StrP + S-&gt;<a class="code" href="structpkgCache_1_1Provides.xhtml#a32c06e1fb98eeaa5229f84cfb70d4fb6">ProvideVersion</a>;}</div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;        <span class="keyword">inline</span> PkgIterator ParentPkg()<span class="keyword"> const </span>{<span class="keywordflow">return</span> PkgIterator(*Owner,Owner-&gt;PkgP + S-&gt;<a class="code" href="structpkgCache_1_1Provides.xhtml#a8b21c48cbc2c531761a089792265a43c">ParentPkg</a>);}</div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;        <span class="keyword">inline</span> VerIterator OwnerVer()<span class="keyword"> const </span>{<span class="keywordflow">return</span> VerIterator(*Owner,Owner-&gt;VerP + S-&gt;<a class="code" href="structpkgCache_1_1Provides.xhtml#a97bd57cd8f5c8df5fd909f8b59f0b71c">Version</a>);}</div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;        <span class="keyword">inline</span> PkgIterator OwnerPkg()<span class="keyword"> const </span>{<span class="keywordflow">return</span> PkgIterator(*Owner,Owner-&gt;PkgP + Owner-&gt;VerP[S-&gt;<a class="code" href="structpkgCache_1_1Provides.xhtml#a97bd57cd8f5c8df5fd909f8b59f0b71c">Version</a>].<a class="code" href="structpkgCache_1_1Version.xhtml#a8b21c48cbc2c531761a089792265a43c">ParentPkg</a>);}</div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;</div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;        <span class="keywordtype">bool</span> IsMultiArchImplicit() const APT_PURE;</div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;</div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;        inline PrvIterator() : Iterator&lt;Provides, PrvIterator&gt;(), Type(PrvVer) {}</div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;        <span class="keyword">inline</span> PrvIterator(<a class="code" href="classpkgCache.xhtml">pkgCache</a> &amp;Owner, Provides *Trg, Version*) :</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;                Iterator&lt;Provides, PrvIterator&gt;(Owner, Trg), Type(PrvVer) {</div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;                <span class="keywordflow">if</span> (S == 0)</div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;                        S = Owner.ProvideP;</div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;        }</div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;        <span class="keyword">inline</span> PrvIterator(<a class="code" href="classpkgCache.xhtml">pkgCache</a> &amp;Owner, Provides *Trg, Package*) :</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;                Iterator&lt;Provides, PrvIterator&gt;(Owner, Trg), Type(PrvPkg) {</div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;                <span class="keywordflow">if</span> (S == 0)</div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;                        S = Owner.ProvideP;</div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;        }</div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;};</div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;                                                                        <span class="comment">/*}}}*/</span></div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;<span class="comment">// Package file                                                         /*{{{*/</span></div>
<div class="line"><a name="l00357"></a><span class="lineno"><a class="line" href="classpkgCache_1_1PkgFileIterator.xhtml">  357</a></span>&#160;<span class="keyword">class </span><a class="code" href="classpkgCache_1_1PkgFileIterator.xhtml">pkgCache::PkgFileIterator</a> : <span class="keyword">public</span> <a class="code" href="classpkgCache_1_1Iterator.xhtml">Iterator</a>&lt;PackageFile, PkgFileIterator&gt; {</div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;        <span class="keyword">protected</span>:</div>
<div class="line"><a name="l00359"></a><span class="lineno"><a class="line" href="classpkgCache_1_1PkgFileIterator.xhtml#a5eeab45ea1eebe500a77fb4ce70463a8">  359</a></span>&#160;        <span class="keyword">inline</span> <a class="code" href="structpkgCache_1_1PackageFile.xhtml">PackageFile</a>* <a class="code" href="classpkgCache_1_1PkgFileIterator.xhtml#a5eeab45ea1eebe500a77fb4ce70463a8">OwnerPointer</a>()<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;                <span class="keywordflow">return</span> (Owner != 0) ? Owner-&gt;PkgFileP : 0;</div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;        }</div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;</div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;        <span class="keyword">public</span>:</div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;        <span class="comment">// Iteration</span></div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;        <span class="keywordtype">void</span> operator ++(<span class="keywordtype">int</span>) {<span class="keywordflow">if</span> (S != Owner-&gt;PkgFileP) S = Owner-&gt;PkgFileP + S-&gt;<a class="code" href="structpkgCache_1_1PackageFile.xhtml#a834318688de732bfd0e8c1a1e79c44be">NextFile</a>;}</div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;        <span class="keyword">inline</span> <span class="keywordtype">void</span> operator ++() {operator ++(0);}</div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;</div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;        <span class="comment">// Accessors</span></div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;        <span class="keyword">inline</span> <span class="keyword">const</span> <span class="keywordtype">char</span> *FileName()<span class="keyword"> const </span>{<span class="keywordflow">return</span> S-&gt;<a class="code" href="structpkgCache_1_1PackageFile.xhtml#a7aead2c7e2505c014da71f5a5039d9af">FileName</a> == 0?0:Owner-&gt;StrP + S-&gt;<a class="code" href="structpkgCache_1_1PackageFile.xhtml#a7aead2c7e2505c014da71f5a5039d9af">FileName</a>;}</div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;        <span class="keyword">inline</span> <span class="keyword">const</span> <span class="keywordtype">char</span> *Archive()<span class="keyword"> const </span>{<span class="keywordflow">return</span> S-&gt;<a class="code" href="structpkgCache_1_1PackageFile.xhtml#a6d67934dc136a22e6fb46b59c04e30f7">Archive</a> == 0?0:Owner-&gt;StrP + S-&gt;<a class="code" href="structpkgCache_1_1PackageFile.xhtml#a6d67934dc136a22e6fb46b59c04e30f7">Archive</a>;}</div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;        <span class="keyword">inline</span> <span class="keyword">const</span> <span class="keywordtype">char</span> *Component()<span class="keyword"> const </span>{<span class="keywordflow">return</span> S-&gt;Component == 0?0:Owner-&gt;StrP + S-&gt;Component;}</div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;        <span class="keyword">inline</span> <span class="keyword">const</span> <span class="keywordtype">char</span> *Version()<span class="keyword"> const </span>{<span class="keywordflow">return</span> S-&gt;Version == 0?0:Owner-&gt;StrP + S-&gt;Version;}</div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;        <span class="keyword">inline</span> <span class="keyword">const</span> <span class="keywordtype">char</span> *Origin()<span class="keyword"> const </span>{<span class="keywordflow">return</span> S-&gt;Origin == 0?0:Owner-&gt;StrP + S-&gt;Origin;}</div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;        <span class="keyword">inline</span> <span class="keyword">const</span> <span class="keywordtype">char</span> *Codename()<span class="keyword"> const </span>{<span class="keywordflow">return</span> S-&gt;Codename ==0?0:Owner-&gt;StrP + S-&gt;Codename;}</div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;        <span class="keyword">inline</span> <span class="keyword">const</span> <span class="keywordtype">char</span> *Label()<span class="keyword"> const </span>{<span class="keywordflow">return</span> S-&gt;Label == 0?0:Owner-&gt;StrP + S-&gt;Label;}</div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;        <span class="keyword">inline</span> <span class="keyword">const</span> <span class="keywordtype">char</span> *Site()<span class="keyword"> const </span>{<span class="keywordflow">return</span> S-&gt;<a class="code" href="structpkgCache_1_1PackageFile.xhtml#a2d3aa95903bf6c602018636f73836df0">Site</a> == 0?0:Owner-&gt;StrP + S-&gt;<a class="code" href="structpkgCache_1_1PackageFile.xhtml#a2d3aa95903bf6c602018636f73836df0">Site</a>;}</div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;        <span class="keyword">inline</span> <span class="keyword">const</span> <span class="keywordtype">char</span> *Architecture()<span class="keyword"> const </span>{<span class="keywordflow">return</span> S-&gt;Architecture == 0?0:Owner-&gt;StrP + S-&gt;Architecture;}</div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;        <span class="keyword">inline</span> <span class="keyword">const</span> <span class="keywordtype">char</span> *IndexType()<span class="keyword"> const </span>{<span class="keywordflow">return</span> S-&gt;<a class="code" href="structpkgCache_1_1PackageFile.xhtml#acfb626396ca6145d7ad40913ae1e5e30">IndexType</a> == 0?0:Owner-&gt;StrP + S-&gt;<a class="code" href="structpkgCache_1_1PackageFile.xhtml#acfb626396ca6145d7ad40913ae1e5e30">IndexType</a>;}</div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;</div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;        <span class="keywordtype">bool</span> IsOk();</div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;        std::string RelStr();</div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;</div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;        <span class="comment">// Constructors</span></div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;        <span class="keyword">inline</span> PkgFileIterator() : Iterator&lt;PackageFile, PkgFileIterator&gt;() {}</div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;        <span class="keyword">inline</span> PkgFileIterator(<a class="code" href="classpkgCache.xhtml">pkgCache</a> &amp;Owner) : Iterator&lt;PackageFile, PkgFileIterator&gt;(Owner, Owner.PkgFileP) {}</div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;        <span class="keyword">inline</span> PkgFileIterator(<a class="code" href="classpkgCache.xhtml">pkgCache</a> &amp;Owner,PackageFile *Trg) : Iterator&lt;PackageFile, PkgFileIterator&gt;(Owner, Trg) {}</div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;};</div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;                                                                        <span class="comment">/*}}}*/</span></div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;<span class="comment">// Version File                                                         /*{{{*/</span></div>
<div class="line"><a name="l00390"></a><span class="lineno"><a class="line" href="classpkgCache_1_1VerFileIterator.xhtml">  390</a></span>&#160;<span class="keyword">class </span><a class="code" href="classpkgCache_1_1VerFileIterator.xhtml">pkgCache::VerFileIterator</a> : <span class="keyword">public</span> <a class="code" href="classpkgCache_1_1Iterator.xhtml">pkgCache::Iterator</a>&lt;VerFile, VerFileIterator&gt; {</div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;        <span class="keyword">protected</span>:</div>
<div class="line"><a name="l00392"></a><span class="lineno"><a class="line" href="classpkgCache_1_1VerFileIterator.xhtml#a1609e6a37b68153d592b493462641601">  392</a></span>&#160;        <span class="keyword">inline</span> <a class="code" href="structpkgCache_1_1VerFile.xhtml">VerFile</a>* <a class="code" href="classpkgCache_1_1VerFileIterator.xhtml#a1609e6a37b68153d592b493462641601">OwnerPointer</a>()<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;                <span class="keywordflow">return</span> (Owner != 0) ? Owner-&gt;VerFileP : 0;</div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;        }</div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;</div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;        <span class="keyword">public</span>:</div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;        <span class="comment">// Iteration</span></div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;        <span class="keywordtype">void</span> operator ++(<span class="keywordtype">int</span>) {<span class="keywordflow">if</span> (S != Owner-&gt;VerFileP) S = Owner-&gt;VerFileP + S-&gt;<a class="code" href="structpkgCache_1_1VerFile.xhtml#a834318688de732bfd0e8c1a1e79c44be">NextFile</a>;}</div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;        <span class="keyword">inline</span> <span class="keywordtype">void</span> operator ++() {operator ++(0);}</div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;</div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;        <span class="comment">// Accessors</span></div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;        <span class="keyword">inline</span> PkgFileIterator File()<span class="keyword"> const </span>{<span class="keywordflow">return</span> PkgFileIterator(*Owner,S-&gt;<a class="code" href="structpkgCache_1_1VerFile.xhtml#af4599f7ab1abead5702621b8dd500703">File</a> + Owner-&gt;PkgFileP);}</div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;</div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;        <span class="keyword">inline</span> VerFileIterator() : Iterator&lt;VerFile, VerFileIterator&gt;() {}</div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;        <span class="keyword">inline</span> VerFileIterator(<a class="code" href="classpkgCache.xhtml">pkgCache</a> &amp;Owner,VerFile *Trg) : Iterator&lt;VerFile, VerFileIterator&gt;(Owner, Trg) {}</div>
<div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;};</div>
<div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;                                                                        <span class="comment">/*}}}*/</span></div>
<div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;<span class="comment">// Description File                                                     /*{{{*/</span></div>
<div class="line"><a name="l00409"></a><span class="lineno"><a class="line" href="classpkgCache_1_1DescFileIterator.xhtml">  409</a></span>&#160;<span class="keyword">class </span><a class="code" href="classpkgCache_1_1DescFileIterator.xhtml">pkgCache::DescFileIterator</a> : <span class="keyword">public</span> <a class="code" href="classpkgCache_1_1Iterator.xhtml">Iterator</a>&lt;DescFile, DescFileIterator&gt; {</div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;        <span class="keyword">protected</span>:</div>
<div class="line"><a name="l00411"></a><span class="lineno"><a class="line" href="classpkgCache_1_1DescFileIterator.xhtml#a6d09076ab525ad1628783c034437033c">  411</a></span>&#160;        <span class="keyword">inline</span> <a class="code" href="structpkgCache_1_1DescFile.xhtml">DescFile</a>* <a class="code" href="classpkgCache_1_1DescFileIterator.xhtml#a6d09076ab525ad1628783c034437033c">OwnerPointer</a>()<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;                <span class="keywordflow">return</span> (Owner != 0) ? Owner-&gt;DescFileP : 0;</div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;        }</div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;</div>
<div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;        <span class="keyword">public</span>:</div>
<div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;        <span class="comment">// Iteration</span></div>
<div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;        <span class="keywordtype">void</span> operator ++(<span class="keywordtype">int</span>) {<span class="keywordflow">if</span> (S != Owner-&gt;DescFileP) S = Owner-&gt;DescFileP + S-&gt;<a class="code" href="structpkgCache_1_1DescFile.xhtml#a834318688de732bfd0e8c1a1e79c44be">NextFile</a>;}</div>
<div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;        <span class="keyword">inline</span> <span class="keywordtype">void</span> operator ++() {operator ++(0);}</div>
<div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;</div>
<div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;        <span class="comment">// Accessors</span></div>
<div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;        <span class="keyword">inline</span> PkgFileIterator File()<span class="keyword"> const </span>{<span class="keywordflow">return</span> PkgFileIterator(*Owner,S-&gt;<a class="code" href="structpkgCache_1_1DescFile.xhtml#af4599f7ab1abead5702621b8dd500703">File</a> + Owner-&gt;PkgFileP);}</div>
<div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;</div>
<div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;        <span class="keyword">inline</span> DescFileIterator() : Iterator&lt;DescFile, DescFileIterator&gt;() {}</div>
<div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;        <span class="keyword">inline</span> DescFileIterator(<a class="code" href="classpkgCache.xhtml">pkgCache</a> &amp;Owner,DescFile *Trg) : Iterator&lt;DescFile, DescFileIterator&gt;(Owner, Trg) {}</div>
<div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;};</div>
<div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;                                                                        <span class="comment">/*}}}*/</span></div>
<div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;<span class="comment">// Inlined Begin functions can&#39;t be in the class because of order problems /*{{{*/</span></div>
<div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;<span class="keyword">inline</span> <a class="code" href="classpkgCache_1_1PkgIterator.xhtml">pkgCache::PkgIterator</a> pkgCache::GrpIterator::PackageList()<span class="keyword"> const</span></div>
<div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;<span class="keyword">       </span>{<span class="keywordflow">return</span> PkgIterator(*Owner,Owner-&gt;PkgP + S-&gt;<a class="code" href="structpkgCache_1_1Group.xhtml#ab336d151b87f74a7b9d1dd4e39c483f6">FirstPackage</a>);}</div>
<div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;<span class="keyword">inline</span> <a class="code" href="classpkgCache_1_1VerIterator.xhtml">pkgCache::VerIterator</a> pkgCache::PkgIterator::VersionList()<span class="keyword"> const</span></div>
<div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;<span class="keyword">       </span>{<span class="keywordflow">return</span> VerIterator(*Owner,Owner-&gt;VerP + S-&gt;VersionList);}</div>
<div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;<span class="keyword">inline</span> <a class="code" href="classpkgCache_1_1VerIterator.xhtml">pkgCache::VerIterator</a> pkgCache::PkgIterator::CurrentVer()<span class="keyword"> const</span></div>
<div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;<span class="keyword">       </span>{<span class="keywordflow">return</span> VerIterator(*Owner,Owner-&gt;VerP + S-&gt;CurrentVer);}</div>
<div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;<span class="keyword">inline</span> <a class="code" href="classpkgCache_1_1DepIterator.xhtml">pkgCache::DepIterator</a> pkgCache::PkgIterator::RevDependsList()<span class="keyword"> const</span></div>
<div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;<span class="keyword">       </span>{<span class="keywordflow">return</span> DepIterator(*Owner,Owner-&gt;DepP + S-&gt;RevDepends,S);}</div>
<div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;<span class="keyword">inline</span> <a class="code" href="classpkgCache_1_1PrvIterator.xhtml">pkgCache::PrvIterator</a> pkgCache::PkgIterator::ProvidesList()<span class="keyword"> const</span></div>
<div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;<span class="keyword">       </span>{<span class="keywordflow">return</span> PrvIterator(*Owner,Owner-&gt;ProvideP + S-&gt;ProvidesList,S);}</div>
<div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;<span class="keyword">inline</span> <a class="code" href="classpkgCache_1_1DescIterator.xhtml">pkgCache::DescIterator</a> pkgCache::VerIterator::DescriptionList()<span class="keyword"> const</span></div>
<div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;<span class="keyword">       </span>{<span class="keywordflow">return</span> DescIterator(*Owner,Owner-&gt;DescP + S-&gt;DescriptionList);}</div>
<div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;<span class="keyword">inline</span> <a class="code" href="classpkgCache_1_1PrvIterator.xhtml">pkgCache::PrvIterator</a> pkgCache::VerIterator::ProvidesList()<span class="keyword"> const</span></div>
<div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;<span class="keyword">       </span>{<span class="keywordflow">return</span> PrvIterator(*Owner,Owner-&gt;ProvideP + S-&gt;ProvidesList,S);}</div>
<div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;<span class="keyword">inline</span> <a class="code" href="classpkgCache_1_1DepIterator.xhtml">pkgCache::DepIterator</a> pkgCache::VerIterator::DependsList()<span class="keyword"> const</span></div>
<div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;<span class="keyword">       </span>{<span class="keywordflow">return</span> DepIterator(*Owner,Owner-&gt;DepP + S-&gt;DependsList,S);}</div>
<div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;<span class="keyword">inline</span> <a class="code" href="classpkgCache_1_1VerFileIterator.xhtml">pkgCache::VerFileIterator</a> pkgCache::VerIterator::FileList()<span class="keyword"> const</span></div>
<div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;<span class="keyword">       </span>{<span class="keywordflow">return</span> VerFileIterator(*Owner,Owner-&gt;VerFileP + S-&gt;FileList);}</div>
<div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;<span class="keyword">inline</span> <a class="code" href="classpkgCache_1_1DescFileIterator.xhtml">pkgCache::DescFileIterator</a> pkgCache::DescIterator::FileList()<span class="keyword"> const</span></div>
<div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;<span class="keyword">       </span>{<span class="keywordflow">return</span> DescFileIterator(*Owner,Owner-&gt;DescFileP + S-&gt;FileList);}</div>
<div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;                                                                        <span class="comment">/*}}}*/</span></div>
<div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="ttc" id="structpkgCache_1_1PackageFile_xhtml_a834318688de732bfd0e8c1a1e79c44be"><div class="ttname"><a href="structpkgCache_1_1PackageFile.xhtml#a834318688de732bfd0e8c1a1e79c44be">pkgCache::PackageFile::NextFile</a></div><div class="ttdeci">map_ptrloc NextFile</div><div class="ttdoc">Link to the next PackageFile in the Cache. </div><div class="ttdef"><b>Definition:</b> pkgcache.h:461</div></div>
<div class="ttc" id="structpkgCache_1_1PackageFile_xhtml_a2d3aa95903bf6c602018636f73836df0"><div class="ttname"><a href="structpkgCache_1_1PackageFile.xhtml#a2d3aa95903bf6c602018636f73836df0">pkgCache::PackageFile::Site</a></div><div class="ttdeci">map_ptrloc Site</div><div class="ttdoc">The site the index file was fetched from. </div><div class="ttdef"><b>Definition:</b> pkgcache.h:442</div></div>
<div class="ttc" id="classpkgCache_1_1DepIterator_xhtml"><div class="ttname"><a href="classpkgCache_1_1DepIterator.xhtml">pkgCache::DepIterator</a></div><div class="ttdef"><b>Definition:</b> cacheiterators.h:269</div></div>
<div class="ttc" id="structpkgCache_1_1Provides_xhtml_a27f51ac6417a16977e3b0839f5997ef7"><div class="ttname"><a href="structpkgCache_1_1Provides.xhtml#a27f51ac6417a16977e3b0839f5997ef7">pkgCache::Provides::NextProvides</a></div><div class="ttdeci">map_ptrloc NextProvides</div><div class="ttdoc">next provides (based of package) </div><div class="ttdef"><b>Definition:</b> pkgcache.h:642</div></div>
<div class="ttc" id="structpkgCache_1_1VerFile_xhtml"><div class="ttname"><a href="structpkgCache_1_1VerFile.xhtml">pkgCache::VerFile</a></div><div class="ttdoc">associates a version with a PackageFile </div><div class="ttdef"><b>Definition:</b> pkgcache.h:471</div></div>
<div class="ttc" id="structpkgCache_1_1Version_xhtml_ade3263d852bd30195ec60324aea7f9d9"><div class="ttname"><a href="structpkgCache_1_1Version.xhtml#ade3263d852bd30195ec60324aea7f9d9">pkgCache::Version::VerStr</a></div><div class="ttdeci">map_ptrloc VerStr</div><div class="ttdoc">complete version string </div><div class="ttdef"><b>Definition:</b> pkgcache.h:506</div></div>
<div class="ttc" id="structpkgCache_1_1Dependency_xhtml_a1710777a084deafa2b3022a64cd2f7a4"><div class="ttname"><a href="structpkgCache_1_1Dependency.xhtml#a1710777a084deafa2b3022a64cd2f7a4">pkgCache::Dependency::CompareOp</a></div><div class="ttdeci">unsigned char CompareOp</div><div class="ttdoc">comparison operator specified on the depends line </div><div class="ttdef"><b>Definition:</b> pkgcache.h:617</div></div>
<div class="ttc" id="classpkgCache_1_1PrvIterator_xhtml"><div class="ttname"><a href="classpkgCache_1_1PrvIterator.xhtml">pkgCache::PrvIterator</a></div><div class="ttdef"><b>Definition:</b> cacheiterators.h:320</div></div>
<div class="ttc" id="structpkgCache_1_1Version_xhtml"><div class="ttname"><a href="structpkgCache_1_1Version.xhtml">pkgCache::Version</a></div><div class="ttdoc">information for a single version of a package </div><div class="ttdef"><b>Definition:</b> pkgcache.h:503</div></div>
<div class="ttc" id="structpkgCache_1_1Version_xhtml_a8324be5b5e844cc9e33d3924da11025fa54991d225c58ce0af43461d4e9a82312"><div class="ttname"><a href="structpkgCache_1_1Version.xhtml#a8324be5b5e844cc9e33d3924da11025fa54991d225c58ce0af43461d4e9a82312">pkgCache::Version::All</a></div><div class="ttdef"><b>Definition:</b> pkgcache.h:512</div></div>
<div class="ttc" id="structpkgCache_1_1Package_xhtml_a2682fe5679606457c71fdaccc9642201"><div class="ttname"><a href="structpkgCache_1_1Package.xhtml#a2682fe5679606457c71fdaccc9642201">pkgCache::Package::CurrentState</a></div><div class="ttdeci">unsigned char CurrentState</div><div class="ttdoc">indicates if the package is installed </div><div class="ttdef"><b>Definition:</b> pkgcache.h:407</div></div>
<div class="ttc" id="structpkgCache_1_1DescFile_xhtml_a834318688de732bfd0e8c1a1e79c44be"><div class="ttname"><a href="structpkgCache_1_1DescFile.xhtml#a834318688de732bfd0e8c1a1e79c44be">pkgCache::DescFile::NextFile</a></div><div class="ttdeci">map_ptrloc NextFile</div><div class="ttdoc">next step in the linked list </div><div class="ttdef"><b>Definition:</b> pkgcache.h:490</div></div>
<div class="ttc" id="structpkgCache_1_1Group_xhtml_a003b2b80c083e7b91263d147956addcf"><div class="ttname"><a href="structpkgCache_1_1Group.xhtml#a003b2b80c083e7b91263d147956addcf">pkgCache::Group::Name</a></div><div class="ttdeci">map_ptrloc Name</div><div class="ttdoc">Name of the group. </div><div class="ttdef"><b>Definition:</b> pkgcache.h:337</div></div>
<div class="ttc" id="classpkgCache_xhtml"><div class="ttname"><a href="classpkgCache.xhtml">pkgCache</a></div><div class="ttdef"><b>Definition:</b> pkgcache.h:88</div></div>
<div class="ttc" id="structpkgCache_1_1Description_xhtml_aa5570571c6d782791774e7864a752875"><div class="ttname"><a href="structpkgCache_1_1Description.xhtml#aa5570571c6d782791774e7864a752875">pkgCache::Description::language_code</a></div><div class="ttdeci">map_ptrloc language_code</div><div class="ttdoc">Language code of this description (translation) </div><div class="ttdef"><b>Definition:</b> pkgcache.h:569</div></div>
<div class="ttc" id="classpkgCache_1_1VerIterator_xhtml"><div class="ttname"><a href="classpkgCache_1_1VerIterator.xhtml">pkgCache::VerIterator</a></div><div class="ttdef"><b>Definition:</b> cacheiterators.h:190</div></div>
<div class="ttc" id="structpkgCache_1_1DescFile_xhtml_af4599f7ab1abead5702621b8dd500703"><div class="ttname"><a href="structpkgCache_1_1DescFile.xhtml#af4599f7ab1abead5702621b8dd500703">pkgCache::DescFile::File</a></div><div class="ttdeci">map_ptrloc File</div><div class="ttdoc">index of the file that this description was found in </div><div class="ttdef"><b>Definition:</b> pkgcache.h:488</div></div>
<div class="ttc" id="classpkgCache_1_1GrpIterator_xhtml_a70e5123456c1a2d4f4b211bb74764c0e"><div class="ttname"><a href="classpkgCache_1_1GrpIterator.xhtml#a70e5123456c1a2d4f4b211bb74764c0e">pkgCache::GrpIterator::OwnerPointer</a></div><div class="ttdeci">Group * OwnerPointer() const </div><div class="ttdoc">Returns the Pointer for this struct in the owner The implementation of this method should be pretty s...</div><div class="ttdef"><b>Definition:</b> cacheiterators.h:104</div></div>
<div class="ttc" id="structpkgCache_1_1Package_xhtml_a003b2b80c083e7b91263d147956addcf"><div class="ttname"><a href="structpkgCache_1_1Package.xhtml#a003b2b80c083e7b91263d147956addcf">pkgCache::Package::Name</a></div><div class="ttdeci">map_ptrloc Name</div><div class="ttdoc">Name of the package. </div><div class="ttdef"><b>Definition:</b> pkgcache.h:366</div></div>
<div class="ttc" id="structpkgCache_1_1Version_xhtml_a7a5a6ba669ced07014f8651ce95b4590"><div class="ttname"><a href="structpkgCache_1_1Version.xhtml#a7a5a6ba669ced07014f8651ce95b4590">pkgCache::Version::Priority</a></div><div class="ttdeci">unsigned char Priority</div><div class="ttdoc">parsed priority value </div><div class="ttdef"><b>Definition:</b> pkgcache.h:558</div></div>
<div class="ttc" id="structpkgCache_1_1VerFile_xhtml_a834318688de732bfd0e8c1a1e79c44be"><div class="ttname"><a href="structpkgCache_1_1VerFile.xhtml#a834318688de732bfd0e8c1a1e79c44be">pkgCache::VerFile::NextFile</a></div><div class="ttdeci">map_ptrloc NextFile</div><div class="ttdoc">next step in the linked list </div><div class="ttdef"><b>Definition:</b> pkgcache.h:476</div></div>
<div class="ttc" id="classpkgCache_1_1PrvIterator_xhtml_adf802bef71749b98b8fc56753b6252fd"><div class="ttname"><a href="classpkgCache_1_1PrvIterator.xhtml#adf802bef71749b98b8fc56753b6252fd">pkgCache::PrvIterator::OwnerPointer</a></div><div class="ttdeci">Provides * OwnerPointer() const </div><div class="ttdoc">Returns the Pointer for this struct in the owner The implementation of this method should be pretty s...</div><div class="ttdef"><b>Definition:</b> cacheiterators.h:324</div></div>
<div class="ttc" id="structpkgCache_1_1Provides_xhtml_aa976e01a9218e6cc3c0119469ebf553a"><div class="ttname"><a href="structpkgCache_1_1Provides.xhtml#aa976e01a9218e6cc3c0119469ebf553a">pkgCache::Provides::NextPkgProv</a></div><div class="ttdeci">map_ptrloc NextPkgProv</div><div class="ttdoc">next provides (based of version) </div><div class="ttdef"><b>Definition:</b> pkgcache.h:644</div></div>
<div class="ttc" id="structpkgCache_1_1Version_xhtml_a4bb6ae3e0b912e661c9589ec803b67c3"><div class="ttname"><a href="structpkgCache_1_1Version.xhtml#a4bb6ae3e0b912e661c9589ec803b67c3">pkgCache::Version::Section</a></div><div class="ttdeci">map_ptrloc Section</div><div class="ttdoc">section this version is filled in </div><div class="ttdef"><b>Definition:</b> pkgcache.h:508</div></div>
<div class="ttc" id="classpkgCache_1_1DescIterator_xhtml_a9bbac2719784482c2a19979e106c296b"><div class="ttname"><a href="classpkgCache_1_1DescIterator.xhtml#a9bbac2719784482c2a19979e106c296b">pkgCache::DescIterator::OwnerPointer</a></div><div class="ttdeci">Description * OwnerPointer() const </div><div class="ttdoc">Returns the Pointer for this struct in the owner The implementation of this method should be pretty s...</div><div class="ttdef"><b>Definition:</b> cacheiterators.h:244</div></div>
<div class="ttc" id="structpkgCache_1_1Description_xhtml_a7959dbeebed3d0b4cc50c363908c58f0"><div class="ttname"><a href="structpkgCache_1_1Description.xhtml#a7959dbeebed3d0b4cc50c363908c58f0">pkgCache::Description::md5sum</a></div><div class="ttdeci">map_ptrloc md5sum</div><div class="ttdoc">MD5sum of the original description. </div><div class="ttdef"><b>Definition:</b> pkgcache.h:574</div></div>
<div class="ttc" id="structpkgCache_1_1Dependency_xhtml_a52f779a20efcbb37dccfbc495750adb5"><div class="ttname"><a href="structpkgCache_1_1Dependency.xhtml#a52f779a20efcbb37dccfbc495750adb5">pkgCache::Dependency::ParentVer</a></div><div class="ttdeci">map_ptrloc ParentVer</div><div class="ttdoc">version of the package which has the reverse depends </div><div class="ttdef"><b>Definition:</b> pkgcache.h:608</div></div>
<div class="ttc" id="structpkgCache_1_1Version_xhtml_aa135f00c62252418b2ed5c85f7643851"><div class="ttname"><a href="structpkgCache_1_1Version.xhtml#aa135f00c62252418b2ed5c85f7643851">pkgCache::Version::MultiArch</a></div><div class="ttdeci">unsigned char MultiArch</div><div class="ttdoc">stores the MultiArch capabilities of this version </div><div class="ttdef"><b>Definition:</b> pkgcache.h:522</div></div>
<div class="ttc" id="structpkgCache_1_1Provides_xhtml_a32c06e1fb98eeaa5229f84cfb70d4fb6"><div class="ttname"><a href="structpkgCache_1_1Provides.xhtml#a32c06e1fb98eeaa5229f84cfb70d4fb6">pkgCache::Provides::ProvideVersion</a></div><div class="ttdeci">map_ptrloc ProvideVersion</div><div class="ttdoc">version in the provides line (if any) </div><div class="ttdef"><b>Definition:</b> pkgcache.h:640</div></div>
<div class="ttc" id="structpkgCache_1_1Provides_xhtml_a8b21c48cbc2c531761a089792265a43c"><div class="ttname"><a href="structpkgCache_1_1Provides.xhtml#a8b21c48cbc2c531761a089792265a43c">pkgCache::Provides::ParentPkg</a></div><div class="ttdeci">map_ptrloc ParentPkg</div><div class="ttdoc">index of the package providing this </div><div class="ttdef"><b>Definition:</b> pkgcache.h:632</div></div>
<div class="ttc" id="structpkgCache_1_1PackageFile_xhtml"><div class="ttname"><a href="structpkgCache_1_1PackageFile.xhtml">pkgCache::PackageFile</a></div><div class="ttdoc">stores information about the files used to generate the cache </div><div class="ttdef"><b>Definition:</b> pkgcache.h:426</div></div>
<div class="ttc" id="classpkgCache_1_1DescIterator_xhtml"><div class="ttname"><a href="classpkgCache_1_1DescIterator.xhtml">pkgCache::DescIterator</a></div><div class="ttdef"><b>Definition:</b> cacheiterators.h:242</div></div>
<div class="ttc" id="classpkgCache_1_1Iterator_xhtml_ac5f859168a3ef5a04d97c141fdb6d80d"><div class="ttname"><a href="classpkgCache_1_1Iterator.xhtml#ac5f859168a3ef5a04d97c141fdb6d80d">pkgCache::Iterator::OwnerPointer</a></div><div class="ttdeci">virtual Str * OwnerPointer() const =0</div><div class="ttdoc">Returns the Pointer for this struct in the owner The implementation of this method should be pretty s...</div></div>
<div class="ttc" id="structpkgCache_1_1VerFile_xhtml_af4599f7ab1abead5702621b8dd500703"><div class="ttname"><a href="structpkgCache_1_1VerFile.xhtml#af4599f7ab1abead5702621b8dd500703">pkgCache::VerFile::File</a></div><div class="ttdeci">map_ptrloc File</div><div class="ttdoc">index of the package file that this version was found in </div><div class="ttdef"><b>Definition:</b> pkgcache.h:474</div></div>
<div class="ttc" id="structpkgCache_1_1Dependency_xhtml_aa8450776ab620f8870aaee14ac1747fe"><div class="ttname"><a href="structpkgCache_1_1Dependency.xhtml#aa8450776ab620f8870aaee14ac1747fe">pkgCache::Dependency::Type</a></div><div class="ttdeci">unsigned char Type</div><div class="ttdoc">Dependency type - Depends, Recommends, Conflicts, etc. </div><div class="ttdef"><b>Definition:</b> pkgcache.h:613</div></div>
<div class="ttc" id="classpkgCache_1_1GrpIterator_xhtml"><div class="ttname"><a href="classpkgCache_1_1GrpIterator.xhtml">pkgCache::GrpIterator</a></div><div class="ttdef"><b>Definition:</b> cacheiterators.h:100</div></div>
<div class="ttc" id="structpkgCache_1_1PackageFile_xhtml_a7aead2c7e2505c014da71f5a5039d9af"><div class="ttname"><a href="structpkgCache_1_1PackageFile.xhtml#a7aead2c7e2505c014da71f5a5039d9af">pkgCache::PackageFile::FileName</a></div><div class="ttdeci">map_ptrloc FileName</div><div class="ttdoc">physical disk file that this PackageFile represents </div><div class="ttdef"><b>Definition:</b> pkgcache.h:429</div></div>
<div class="ttc" id="structpkgCache_1_1Dependency_xhtml_a7d4d8077c6c68703126e2785fb2ec7ee"><div class="ttname"><a href="structpkgCache_1_1Dependency.xhtml#a7d4d8077c6c68703126e2785fb2ec7ee">pkgCache::Dependency::NextDepends</a></div><div class="ttdeci">map_ptrloc NextDepends</div><div class="ttdoc">next dependency of this version </div><div class="ttdef"><b>Definition:</b> pkgcache.h:604</div></div>
<div class="ttc" id="structpkgCache_1_1Version_xhtml_a2018824a2cde40fcad75f5066bb5708b"><div class="ttname"><a href="structpkgCache_1_1Version.xhtml#a2018824a2cde40fcad75f5066bb5708b">pkgCache::Version::Hash</a></div><div class="ttdeci">unsigned short Hash</div><div class="ttdoc">characteristic value representing this version </div><div class="ttdef"><b>Definition:</b> pkgcache.h:554</div></div>
<div class="ttc" id="structpkgCache_1_1Dependency_xhtml"><div class="ttname"><a href="structpkgCache_1_1Dependency.xhtml">pkgCache::Dependency</a></div><div class="ttdoc">information for a single dependency record </div><div class="ttdef"><b>Definition:</b> pkgcache.h:594</div></div>
<div class="ttc" id="classpkgCache_1_1GrpIterator_xhtml_a98f2f26c25e18247f674d7be4537b841"><div class="ttname"><a href="classpkgCache_1_1GrpIterator.xhtml#a98f2f26c25e18247f674d7be4537b841">pkgCache::GrpIterator::FindPreferredPkg</a></div><div class="ttdeci">PkgIterator FindPreferredPkg(bool const &amp;PreferNonVirtual=true) const </div><div class="ttdoc">find the package with the &quot;best&quot; architecture </div><div class="ttdef"><b>Definition:</b> pkgcache.cc:383</div></div>
<div class="ttc" id="structpkgCache_1_1DescFile_xhtml"><div class="ttname"><a href="structpkgCache_1_1DescFile.xhtml">pkgCache::DescFile</a></div><div class="ttdoc">associates a description with a Translation file </div><div class="ttdef"><b>Definition:</b> pkgcache.h:485</div></div>
<div class="ttc" id="pkgcache_8h_xhtml"><div class="ttname"><a href="pkgcache_8h.xhtml">pkgcache.h</a></div><div class="ttdoc">pkgCache - Structure definitions for the cache file </div></div>
<div class="ttc" id="classpkgCache_1_1DescFileIterator_xhtml"><div class="ttname"><a href="classpkgCache_1_1DescFileIterator.xhtml">pkgCache::DescFileIterator</a></div><div class="ttdef"><b>Definition:</b> cacheiterators.h:409</div></div>
<div class="ttc" id="structpkgCache_1_1PackageFile_xhtml_acfb626396ca6145d7ad40913ae1e5e30"><div class="ttname"><a href="structpkgCache_1_1PackageFile.xhtml#acfb626396ca6145d7ad40913ae1e5e30">pkgCache::PackageFile::IndexType</a></div><div class="ttdeci">map_ptrloc IndexType</div><div class="ttdoc">indicates what sort of index file this is </div><div class="ttdef"><b>Definition:</b> pkgcache.h:446</div></div>
<div class="ttc" id="classpkgCache_1_1VerFileIterator_xhtml_a1609e6a37b68153d592b493462641601"><div class="ttname"><a href="classpkgCache_1_1VerFileIterator.xhtml#a1609e6a37b68153d592b493462641601">pkgCache::VerFileIterator::OwnerPointer</a></div><div class="ttdeci">VerFile * OwnerPointer() const </div><div class="ttdoc">Returns the Pointer for this struct in the owner The implementation of this method should be pretty s...</div><div class="ttdef"><b>Definition:</b> cacheiterators.h:392</div></div>
<div class="ttc" id="classpkgCache_1_1VerFileIterator_xhtml"><div class="ttname"><a href="classpkgCache_1_1VerFileIterator.xhtml">pkgCache::VerFileIterator</a></div><div class="ttdef"><b>Definition:</b> cacheiterators.h:390</div></div>
<div class="ttc" id="classpkgCache_1_1PkgFileIterator_xhtml"><div class="ttname"><a href="classpkgCache_1_1PkgFileIterator.xhtml">pkgCache::PkgFileIterator</a></div><div class="ttdef"><b>Definition:</b> cacheiterators.h:357</div></div>
<div class="ttc" id="structpkgCache_1_1Provides_xhtml_a97bd57cd8f5c8df5fd909f8b59f0b71c"><div class="ttname"><a href="structpkgCache_1_1Provides.xhtml#a97bd57cd8f5c8df5fd909f8b59f0b71c">pkgCache::Provides::Version</a></div><div class="ttdeci">map_ptrloc Version</div><div class="ttdoc">index of the version this provide line applies to </div><div class="ttdef"><b>Definition:</b> pkgcache.h:634</div></div>
<div class="ttc" id="structpkgCache_1_1Dependency_xhtml_a97bd57cd8f5c8df5fd909f8b59f0b71c"><div class="ttname"><a href="structpkgCache_1_1Dependency.xhtml#a97bd57cd8f5c8df5fd909f8b59f0b71c">pkgCache::Dependency::Version</a></div><div class="ttdeci">map_ptrloc Version</div><div class="ttdoc">string of the version the dependency is applied against </div><div class="ttdef"><b>Definition:</b> pkgcache.h:597</div></div>
<div class="ttc" id="structpkgCache_1_1Dependency_xhtml_a67910351cd81079401bbc02407c79a75"><div class="ttname"><a href="structpkgCache_1_1Dependency.xhtml#a67910351cd81079401bbc02407c79a75">pkgCache::Dependency::NextRevDepends</a></div><div class="ttdeci">map_ptrloc NextRevDepends</div><div class="ttdoc">next reverse dependency of this package </div><div class="ttdef"><b>Definition:</b> pkgcache.h:606</div></div>
<div class="ttc" id="classpkgCache_1_1VerIterator_xhtml_a89a7f2dec86e520aa1b15dcf52e6ab23"><div class="ttname"><a href="classpkgCache_1_1VerIterator.xhtml#a89a7f2dec86e520aa1b15dcf52e6ab23">pkgCache::VerIterator::SimilarVer</a></div><div class="ttdeci">bool SimilarVer(const VerIterator &amp;B) const </div><div class="ttdoc">compares two version and returns if they are similar </div><div class="ttdef"><b>Definition:</b> cacheiterators.h:207</div></div>
<div class="ttc" id="structpkgCache_1_1PackageFile_xhtml_a6d67934dc136a22e6fb46b59c04e30f7"><div class="ttname"><a href="structpkgCache_1_1PackageFile.xhtml#a6d67934dc136a22e6fb46b59c04e30f7">pkgCache::PackageFile::Archive</a></div><div class="ttdeci">map_ptrloc Archive</div><div class="ttdoc">the release information </div><div class="ttdef"><b>Definition:</b> pkgcache.h:434</div></div>
<div class="ttc" id="structpkgCache_1_1Group_xhtml_ab336d151b87f74a7b9d1dd4e39c483f6"><div class="ttname"><a href="structpkgCache_1_1Group.xhtml#ab336d151b87f74a7b9d1dd4e39c483f6">pkgCache::Group::FirstPackage</a></div><div class="ttdeci">map_ptrloc FirstPackage</div><div class="ttdoc">Link to the first package which belongs to the group. </div><div class="ttdef"><b>Definition:</b> pkgcache.h:341</div></div>
<div class="ttc" id="structpkgCache_1_1Provides_xhtml"><div class="ttname"><a href="structpkgCache_1_1Provides.xhtml">pkgCache::Provides</a></div><div class="ttdoc">handles virtual packages </div><div class="ttdef"><b>Definition:</b> pkgcache.h:629</div></div>
<div class="ttc" id="structpkgCache_1_1Version_xhtml_a8b21c48cbc2c531761a089792265a43c"><div class="ttname"><a href="structpkgCache_1_1Version.xhtml#a8b21c48cbc2c531761a089792265a43c">pkgCache::Version::ParentPkg</a></div><div class="ttdeci">map_ptrloc ParentPkg</div><div class="ttdoc">links to the owning package </div><div class="ttdef"><b>Definition:</b> pkgcache.h:540</div></div>
<div class="ttc" id="classpkgCache_1_1DescFileIterator_xhtml_a6d09076ab525ad1628783c034437033c"><div class="ttname"><a href="classpkgCache_1_1DescFileIterator.xhtml#a6d09076ab525ad1628783c034437033c">pkgCache::DescFileIterator::OwnerPointer</a></div><div class="ttdeci">DescFile * OwnerPointer() const </div><div class="ttdoc">Returns the Pointer for this struct in the owner The implementation of this method should be pretty s...</div><div class="ttdef"><b>Definition:</b> cacheiterators.h:411</div></div>
<div class="ttc" id="structpkgCache_1_1Package_xhtml_a2e910588b2690a85a3df03019b908ee4"><div class="ttname"><a href="structpkgCache_1_1Package.xhtml#a2e910588b2690a85a3df03019b908ee4">pkgCache::Package::Arch</a></div><div class="ttdeci">map_ptrloc Arch</div><div class="ttdoc">Architecture of the package. </div><div class="ttdef"><b>Definition:</b> pkgcache.h:368</div></div>
<div class="ttc" id="structpkgCache_1_1Group_xhtml"><div class="ttname"><a href="structpkgCache_1_1Group.xhtml">pkgCache::Group</a></div><div class="ttdoc">groups architecture depending packages together </div><div class="ttdef"><b>Definition:</b> pkgcache.h:334</div></div>
<div class="ttc" id="classpkgCache_1_1PkgFileIterator_xhtml_a5eeab45ea1eebe500a77fb4ce70463a8"><div class="ttname"><a href="classpkgCache_1_1PkgFileIterator.xhtml#a5eeab45ea1eebe500a77fb4ce70463a8">pkgCache::PkgFileIterator::OwnerPointer</a></div><div class="ttdeci">PackageFile * OwnerPointer() const </div><div class="ttdoc">Returns the Pointer for this struct in the owner The implementation of this method should be pretty s...</div><div class="ttdef"><b>Definition:</b> cacheiterators.h:359</div></div>
<div class="ttc" id="structpkgCache_1_1Package_xhtml"><div class="ttname"><a href="structpkgCache_1_1Package.xhtml">pkgCache::Package</a></div><div class="ttdoc">contains information for a single unique package </div><div class="ttdef"><b>Definition:</b> pkgcache.h:363</div></div>
<div class="ttc" id="structpkgCache_1_1Description_xhtml_ab6e4d8a0606196a6c3aa3f9c3f53ceff"><div class="ttname"><a href="structpkgCache_1_1Description.xhtml#ab6e4d8a0606196a6c3aa3f9c3f53ceff">pkgCache::Description::NextDesc</a></div><div class="ttdeci">map_ptrloc NextDesc</div><div class="ttdoc">next translation for this description </div><div class="ttdef"><b>Definition:</b> pkgcache.h:579</div></div>
<div class="ttc" id="classpkgCache_1_1PkgIterator_xhtml"><div class="ttname"><a href="classpkgCache_1_1PkgIterator.xhtml">pkgCache::PkgIterator</a></div><div class="ttdef"><b>Definition:</b> cacheiterators.h:141</div></div>
<div class="ttc" id="structpkgCache_1_1Package_xhtml_a4bb6ae3e0b912e661c9589ec803b67c3"><div class="ttname"><a href="structpkgCache_1_1Package.xhtml#a4bb6ae3e0b912e661c9589ec803b67c3">pkgCache::Package::Section</a></div><div class="ttdeci">map_ptrloc Section</div><div class="ttdoc">indicates the deduced section </div><div class="ttdef"><b>Definition:</b> pkgcache.h:385</div></div>
<div class="ttc" id="structpkgCache_1_1Dependency_xhtml_a381dc2fed51edd65eb2193f8a4c42cc1"><div class="ttname"><a href="structpkgCache_1_1Dependency.xhtml#a381dc2fed51edd65eb2193f8a4c42cc1">pkgCache::Dependency::Package</a></div><div class="ttdeci">map_ptrloc Package</div><div class="ttdoc">index of the package this depends applies to </div><div class="ttdef"><b>Definition:</b> pkgcache.h:602</div></div>
<div class="ttc" id="structpkgCache_1_1Package_xhtml_a344440386fa2d17bc8476798d3373b78"><div class="ttname"><a href="structpkgCache_1_1Package.xhtml#a344440386fa2d17bc8476798d3373b78">pkgCache::Package::CurrentVer</a></div><div class="ttdeci">map_ptrloc CurrentVer</div><div class="ttdoc">index to the installed version </div><div class="ttdef"><b>Definition:</b> pkgcache.h:380</div></div>
<div class="ttc" id="classpkgCache_1_1DepIterator_xhtml_ad8c9e49a8ee257a69302070d16c77e96"><div class="ttname"><a href="classpkgCache_1_1DepIterator.xhtml#ad8c9e49a8ee257a69302070d16c77e96">pkgCache::DepIterator::OwnerPointer</a></div><div class="ttdeci">Dependency * OwnerPointer() const </div><div class="ttdoc">Returns the Pointer for this struct in the owner The implementation of this method should be pretty s...</div><div class="ttdef"><b>Definition:</b> cacheiterators.h:273</div></div>
<div class="ttc" id="classpkgCache_1_1VerIterator_xhtml_a6b354a7d168889fafd04a8e6b69efbfa"><div class="ttname"><a href="classpkgCache_1_1VerIterator.xhtml#a6b354a7d168889fafd04a8e6b69efbfa">pkgCache::VerIterator::OwnerPointer</a></div><div class="ttdeci">Version * OwnerPointer() const </div><div class="ttdoc">Returns the Pointer for this struct in the owner The implementation of this method should be pretty s...</div><div class="ttdef"><b>Definition:</b> cacheiterators.h:192</div></div>
<div class="ttc" id="classpkgCache_1_1Iterator_xhtml"><div class="ttname"><a href="classpkgCache_1_1Iterator.xhtml">pkgCache::Iterator</a></div><div class="ttdef"><b>Definition:</b> cacheiterators.h:44</div></div>
<div class="ttc" id="structpkgCache_1_1Version_xhtml_a03383f42381ce6ad45332685ed49ff14"><div class="ttname"><a href="structpkgCache_1_1Version.xhtml#a03383f42381ce6ad45332685ed49ff14">pkgCache::Version::NextVer</a></div><div class="ttdeci">map_ptrloc NextVer</div><div class="ttdoc">next (lower or equal) version in the linked list </div><div class="ttdef"><b>Definition:</b> pkgcache.h:532</div></div>
<div class="ttc" id="structpkgCache_1_1Description_xhtml"><div class="ttname"><a href="structpkgCache_1_1Description.xhtml">pkgCache::Description</a></div><div class="ttdoc">datamember of a linked list of available description for a version </div><div class="ttdef"><b>Definition:</b> pkgcache.h:563</div></div>
<div class="ttc" id="classpkgCache_1_1PkgIterator_xhtml_a3e8ef83055cfa1239167f151b6a76535"><div class="ttname"><a href="classpkgCache_1_1PkgIterator.xhtml#a3e8ef83055cfa1239167f151b6a76535">pkgCache::PkgIterator::OwnerPointer</a></div><div class="ttdeci">Package * OwnerPointer() const </div><div class="ttdoc">Returns the Pointer for this struct in the owner The implementation of this method should be pretty s...</div><div class="ttdef"><b>Definition:</b> cacheiterators.h:145</div></div>
<div class="ttc" id="structpkgCache_1_1Package_xhtml_ac37594153b8d9ceda78b60334b7ada1f"><div class="ttname"><a href="structpkgCache_1_1Package.xhtml#ac37594153b8d9ceda78b60334b7ada1f">pkgCache::Package::Group</a></div><div class="ttdeci">map_ptrloc Group</div><div class="ttdoc">index of the group this package belongs to </div><div class="ttdef"><b>Definition:</b> pkgcache.h:387</div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.6
</small></address>
</body>
</html>
