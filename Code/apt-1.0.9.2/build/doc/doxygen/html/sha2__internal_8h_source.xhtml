<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.6"/>
<title>apt: apt-pkg/contrib/sha2_internal.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">apt
   &#160;<span id="projectnumber">1.0.9.2</span>
   </div>
   <div id="projectbrief">commandline package manager</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.6 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="modules.xhtml"><span>Modules</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
    </ul>
  </div>
<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_18f22d4be2ca84c350e120b6506056ca.xhtml">apt-pkg</a></li><li class="navelem"><a class="el" href="dir_c6ef23f15b074dcedf6810e24f2a7676.xhtml">contrib</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">sha2_internal.h</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * FILE:        sha2.h</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> * AUTHOR:      Aaron D. Gifford - http://www.aarongifford.com/</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * </span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> * Copyright (c) 2000-2001, Aaron D. Gifford</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * All rights reserved.</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * Redistribution and use in source and binary forms, with or without</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * modification, are permitted provided that the following conditions</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * are met:</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * 1. Redistributions of source code must retain the above copyright</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *    notice, this list of conditions and the following disclaimer.</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * 2. Redistributions in binary form must reproduce the above copyright</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> *    notice, this list of conditions and the following disclaimer in the</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *    documentation and/or other materials provided with the distribution.</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * 3. Neither the name of the copyright holder nor the names of contributors</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> *    may be used to endorse or promote products derived from this software</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> *    without specific prior written permission.</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * </span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTOR(S) ``AS IS&#39;&#39; AND</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTOR(S) BE LIABLE</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="comment"> * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL</span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="comment"> * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS</span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="comment"> * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)</span></div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="comment"> * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT</span></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="comment"> * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY</span></div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="comment"> * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF</span></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="comment"> * SUCH DAMAGE.</span></div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="comment"> * $Id: sha2.h,v 1.1 2001/11/08 00:02:01 adg Exp adg $</span></div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="preprocessor">#ifndef __SHA2_H__</span></div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define __SHA2_H__</span></div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="comment">/*</span></div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="comment"> * Import u_intXX_t size_t type definitions from system headers.  You</span></div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="comment"> * may need to change this, or define these things yourself in this</span></div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="comment"> * file.</span></div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="preprocessor">#include &lt;sys/types.h&gt;</span></div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="preprocessor">#ifdef SHA2_USE_INTTYPES_H</span></div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="preprocessor">#include &lt;stddef.h&gt;</span></div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="preprocessor">#include &lt;inttypes.h&gt;</span></div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* SHA2_USE_INTTYPES_H */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="comment">/*** SHA-256/384/512 Various Length Definitions ***********************/</span></div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="preprocessor">#define SHA256_BLOCK_LENGTH             64</span></div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define SHA256_DIGEST_LENGTH            32</span></div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define SHA256_DIGEST_STRING_LENGTH     (SHA256_DIGEST_LENGTH * 2 + 1)</span></div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define SHA384_BLOCK_LENGTH             128</span></div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define SHA384_DIGEST_LENGTH            48</span></div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define SHA384_DIGEST_STRING_LENGTH     (SHA384_DIGEST_LENGTH * 2 + 1)</span></div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define SHA512_BLOCK_LENGTH             128</span></div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define SHA512_DIGEST_LENGTH            64</span></div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define SHA512_DIGEST_STRING_LENGTH     (SHA512_DIGEST_LENGTH * 2 + 1)</span></div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;<span class="comment">/*** SHA-256/384/512 Context Structures *******************************/</span></div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;<span class="comment">/* NOTE: If your architecture does not define either u_intXX_t types or</span></div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;<span class="comment"> * uintXX_t (from inttypes.h), you may need to define things by hand</span></div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;<span class="comment"> * for your system:</span></div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;<span class="preprocessor">#if 0</span></div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;<span class="preprocessor"></span><span class="keyword">typedef</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> u_int8_t;         <span class="comment">/* 1-byte  (8-bits)  */</span></div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="keyword">typedef</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> u_int32_t;         <span class="comment">/* 4-bytes (32-bits) */</span></div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="keyword">typedef</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">long</span> u_int64_t;   <span class="comment">/* 8-bytes (64-bits) */</span></div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;<span class="preprocessor"></span><span class="comment">/*</span></div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="comment"> * Most BSD systems already define u_intXX_t types, as does Linux.</span></div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="comment"> * Some systems, however, like Compaq&#39;s Tru64 Unix instead can use</span></div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;<span class="comment"> * uintXX_t types defined by very recent ANSI C standards and included</span></div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;<span class="comment"> * in the file:</span></div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="comment"> *   #include &lt;inttypes.h&gt;</span></div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;<span class="comment"> * If you choose to use &lt;inttypes.h&gt; then please define: </span></div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;<span class="comment"> *   #define SHA2_USE_INTTYPES_H</span></div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;<span class="comment"> * Or on the command line during compile:</span></div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;<span class="comment"> *   cc -DSHA2_USE_INTTYPES_H ...</span></div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;<span class="preprocessor">#ifdef SHA2_USE_INTTYPES_H</span></div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;<span class="keyword">typedef</span> <span class="keyword">struct </span><a class="code" href="struct__SHA256__CTX.xhtml">_SHA256_CTX</a> {</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;        uint32_t        state[8];</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;        uint64_t        bitcount;</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;        uint8_t buffer[SHA256_BLOCK_LENGTH];</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;} <a class="code" href="struct__SHA256__CTX.xhtml">SHA256_CTX</a>;</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;<span class="keyword">typedef</span> <span class="keyword">struct </span><a class="code" href="struct__SHA512__CTX.xhtml">_SHA512_CTX</a> {</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;        uint64_t        state[8];</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;        uint64_t        bitcount[2];</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;        uint8_t buffer[SHA512_BLOCK_LENGTH];</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;} <a class="code" href="struct__SHA512__CTX.xhtml">SHA512_CTX</a>;</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;<span class="preprocessor">#else </span><span class="comment">/* SHA2_USE_INTTYPES_H */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00106"></a><span class="lineno"><a class="line" href="struct__SHA256__CTX.xhtml">  106</a></span>&#160;<span class="keyword">typedef</span> <span class="keyword">struct </span><a class="code" href="struct__SHA256__CTX.xhtml">_SHA256_CTX</a> {</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;        u_int32_t       state[8];</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;        u_int64_t       bitcount;</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;        u_int8_t        buffer[SHA256_BLOCK_LENGTH];</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;} <a class="code" href="struct__SHA256__CTX.xhtml">SHA256_CTX</a>;</div>
<div class="line"><a name="l00111"></a><span class="lineno"><a class="line" href="struct__SHA512__CTX.xhtml">  111</a></span>&#160;<span class="keyword">typedef</span> <span class="keyword">struct </span><a class="code" href="struct__SHA512__CTX.xhtml">_SHA512_CTX</a> {</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;        u_int64_t       state[8];</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;        u_int64_t       bitcount[2];</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;        u_int8_t        buffer[SHA512_BLOCK_LENGTH];</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;} <a class="code" href="struct__SHA512__CTX.xhtml">SHA512_CTX</a>;</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* SHA2_USE_INTTYPES_H */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;<span class="keyword">typedef</span> <a class="code" href="struct__SHA512__CTX.xhtml">SHA512_CTX</a> <a class="code" href="struct__SHA512__CTX.xhtml">SHA384_CTX</a>;</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;<span class="comment">/*** SHA-256/384/512 Function Prototypes ******************************/</span></div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;<span class="preprocessor">#ifndef NOPROTO</span></div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#ifdef SHA2_USE_INTTYPES_H</span></div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;<span class="keywordtype">void</span> SHA256_Init(<a class="code" href="struct__SHA256__CTX.xhtml">SHA256_CTX</a> *);</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;<span class="keywordtype">void</span> SHA256_Update(<a class="code" href="struct__SHA256__CTX.xhtml">SHA256_CTX</a>*, <span class="keyword">const</span> uint8_t*, <span class="keywordtype">size_t</span>);</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;<span class="keywordtype">void</span> SHA256_Final(uint8_t[SHA256_DIGEST_LENGTH], <a class="code" href="struct__SHA256__CTX.xhtml">SHA256_CTX</a>*);</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;<span class="keywordtype">char</span>* SHA256_End(<a class="code" href="struct__SHA256__CTX.xhtml">SHA256_CTX</a>*, <span class="keywordtype">char</span>[SHA256_DIGEST_STRING_LENGTH]);</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;<span class="keywordtype">char</span>* SHA256_Data(<span class="keyword">const</span> uint8_t*, <span class="keywordtype">size_t</span>, <span class="keywordtype">char</span>[SHA256_DIGEST_STRING_LENGTH]);</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;<span class="keywordtype">void</span> SHA384_Init(<a class="code" href="struct__SHA512__CTX.xhtml">SHA384_CTX</a>*);</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;<span class="keywordtype">void</span> SHA384_Update(<a class="code" href="struct__SHA512__CTX.xhtml">SHA384_CTX</a>*, <span class="keyword">const</span> uint8_t*, <span class="keywordtype">size_t</span>);</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;<span class="keywordtype">void</span> SHA384_Final(uint8_t[SHA384_DIGEST_LENGTH], <a class="code" href="struct__SHA512__CTX.xhtml">SHA384_CTX</a>*);</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;<span class="keywordtype">char</span>* SHA384_End(<a class="code" href="struct__SHA512__CTX.xhtml">SHA384_CTX</a>*, <span class="keywordtype">char</span>[SHA384_DIGEST_STRING_LENGTH]);</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;<span class="keywordtype">char</span>* SHA384_Data(<span class="keyword">const</span> uint8_t*, <span class="keywordtype">size_t</span>, <span class="keywordtype">char</span>[SHA384_DIGEST_STRING_LENGTH]);</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;<span class="keywordtype">void</span> SHA512_Init(<a class="code" href="struct__SHA512__CTX.xhtml">SHA512_CTX</a>*);</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;<span class="keywordtype">void</span> SHA512_Update(<a class="code" href="struct__SHA512__CTX.xhtml">SHA512_CTX</a>*, <span class="keyword">const</span> uint8_t*, <span class="keywordtype">size_t</span>);</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;<span class="keywordtype">void</span> SHA512_Final(uint8_t[SHA512_DIGEST_LENGTH], <a class="code" href="struct__SHA512__CTX.xhtml">SHA512_CTX</a>*);</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;<span class="keywordtype">char</span>* SHA512_End(<a class="code" href="struct__SHA512__CTX.xhtml">SHA512_CTX</a>*, <span class="keywordtype">char</span>[SHA512_DIGEST_STRING_LENGTH]);</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;<span class="keywordtype">char</span>* SHA512_Data(<span class="keyword">const</span> uint8_t*, <span class="keywordtype">size_t</span>, <span class="keywordtype">char</span>[SHA512_DIGEST_STRING_LENGTH]);</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;<span class="preprocessor">#else </span><span class="comment">/* SHA2_USE_INTTYPES_H */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;<span class="keywordtype">void</span> SHA256_Init(<a class="code" href="struct__SHA256__CTX.xhtml">SHA256_CTX</a> *);</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;<span class="keywordtype">void</span> SHA256_Update(<a class="code" href="struct__SHA256__CTX.xhtml">SHA256_CTX</a>*, <span class="keyword">const</span> u_int8_t*, <span class="keywordtype">size_t</span>);</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;<span class="keywordtype">void</span> SHA256_Final(u_int8_t[SHA256_DIGEST_LENGTH], <a class="code" href="struct__SHA256__CTX.xhtml">SHA256_CTX</a>*);</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;<span class="keywordtype">char</span>* SHA256_End(<a class="code" href="struct__SHA256__CTX.xhtml">SHA256_CTX</a>*, <span class="keywordtype">char</span>[SHA256_DIGEST_STRING_LENGTH]);</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;<span class="keywordtype">char</span>* SHA256_Data(<span class="keyword">const</span> u_int8_t*, <span class="keywordtype">size_t</span>, <span class="keywordtype">char</span>[SHA256_DIGEST_STRING_LENGTH]);</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;<span class="keywordtype">void</span> SHA384_Init(<a class="code" href="struct__SHA512__CTX.xhtml">SHA384_CTX</a>*);</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;<span class="keywordtype">void</span> SHA384_Update(<a class="code" href="struct__SHA512__CTX.xhtml">SHA384_CTX</a>*, <span class="keyword">const</span> u_int8_t*, <span class="keywordtype">size_t</span>);</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;<span class="keywordtype">void</span> SHA384_Final(u_int8_t[SHA384_DIGEST_LENGTH], <a class="code" href="struct__SHA512__CTX.xhtml">SHA384_CTX</a>*);</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;<span class="keywordtype">char</span>* SHA384_End(<a class="code" href="struct__SHA512__CTX.xhtml">SHA384_CTX</a>*, <span class="keywordtype">char</span>[SHA384_DIGEST_STRING_LENGTH]);</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;<span class="keywordtype">char</span>* SHA384_Data(<span class="keyword">const</span> u_int8_t*, <span class="keywordtype">size_t</span>, <span class="keywordtype">char</span>[SHA384_DIGEST_STRING_LENGTH]);</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;<span class="keywordtype">void</span> SHA512_Init(<a class="code" href="struct__SHA512__CTX.xhtml">SHA512_CTX</a>*);</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;<span class="keywordtype">void</span> SHA512_Update(<a class="code" href="struct__SHA512__CTX.xhtml">SHA512_CTX</a>*, <span class="keyword">const</span> u_int8_t*, <span class="keywordtype">size_t</span>);</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;<span class="keywordtype">void</span> SHA512_Final(u_int8_t[SHA512_DIGEST_LENGTH], <a class="code" href="struct__SHA512__CTX.xhtml">SHA512_CTX</a>*);</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;<span class="keywordtype">char</span>* SHA512_End(<a class="code" href="struct__SHA512__CTX.xhtml">SHA512_CTX</a>*, <span class="keywordtype">char</span>[SHA512_DIGEST_STRING_LENGTH]);</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;<span class="keywordtype">char</span>* SHA512_Data(<span class="keyword">const</span> u_int8_t*, <span class="keywordtype">size_t</span>, <span class="keywordtype">char</span>[SHA512_DIGEST_STRING_LENGTH]);</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* SHA2_USE_INTTYPES_H */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;<span class="preprocessor">#else </span><span class="comment">/* NOPROTO */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;<span class="keywordtype">void</span> SHA256_Init();</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;<span class="keywordtype">void</span> SHA256_Update();</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;<span class="keywordtype">void</span> SHA256_Final();</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;<span class="keywordtype">char</span>* SHA256_End();</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;<span class="keywordtype">char</span>* SHA256_Data();</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;<span class="keywordtype">void</span> SHA384_Init();</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;<span class="keywordtype">void</span> SHA384_Update();</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;<span class="keywordtype">void</span> SHA384_Final();</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;<span class="keywordtype">char</span>* SHA384_End();</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;<span class="keywordtype">char</span>* SHA384_Data();</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;<span class="keywordtype">void</span> SHA512_Init();</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;<span class="keywordtype">void</span> SHA512_Update();</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;<span class="keywordtype">void</span> SHA512_Final();</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;<span class="keywordtype">char</span>* SHA512_End();</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;<span class="keywordtype">char</span>* SHA512_Data();</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* NOPROTO */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* __SHA2_H__ */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;<span class="preprocessor"></span></div>
<div class="ttc" id="struct__SHA512__CTX_xhtml"><div class="ttname"><a href="struct__SHA512__CTX.xhtml">_SHA512_CTX</a></div><div class="ttdef"><b>Definition:</b> sha2_internal.h:111</div></div>
<div class="ttc" id="struct__SHA256__CTX_xhtml"><div class="ttname"><a href="struct__SHA256__CTX.xhtml">_SHA256_CTX</a></div><div class="ttdef"><b>Definition:</b> sha2_internal.h:106</div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.6
</small></address>
</body>
</html>
