<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.6"/>
<title>apt: apt-pkg/contrib/hashes.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">apt
   &#160;<span id="projectnumber">1.0.9.2</span>
   </div>
   <div id="projectbrief">commandline package manager</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.6 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="modules.xhtml"><span>Modules</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
    </ul>
  </div>
<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_18f22d4be2ca84c350e120b6506056ca.xhtml">apt-pkg</a></li><li class="navelem"><a class="el" href="dir_c6ef23f15b074dcedf6810e24f2a7676.xhtml">contrib</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">hashes.h</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">// -*- mode: cpp; mode: fold -*-</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">// Description                                                          /*{{{*/</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">// $Id: hashes.h,v 1.2 2001/03/11 05:30:20 jgg Exp $</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">/* ######################################################################</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment">   Hashes - Simple wrapper around the hash functions</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment">   </span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment">   This is just used to make building the methods simpler, this is the</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment">   only interface required..</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment">   </span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment">   ##################################################################### */</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;                                                                        <span class="comment">/*}}}*/</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="preprocessor">#ifndef APTPKG_HASHES_H</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define APTPKG_HASHES_H</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;</div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="preprocessor">#include &lt;apt-pkg/md5.h&gt;</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="preprocessor">#include &lt;apt-pkg/sha1.h&gt;</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="preprocessor">#include &lt;apt-pkg/sha2.h&gt;</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;</div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="preprocessor">#include &lt;cstring&gt;</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="preprocessor">#include &lt;string&gt;</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;</div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#ifndef APT_8_CLEANER_HEADERS</span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor"></span><span class="keyword">using</span> std::min;</div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="keyword">using</span> std::vector;</div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#ifndef APT_10_CLEANER_HEADERS</span></div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#include &lt;apt-pkg/fileutl.h&gt;</span></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &lt;algorithm&gt;</span></div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#include &lt;vector&gt;</span></div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="keyword">class </span><a class="code" href="classFileFd.xhtml">FileFd</a>;</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="comment">// helper class that contains hash function name</span></div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="comment">// and hash</span></div>
<div class="line"><a name="l00039"></a><span class="lineno"><a class="line" href="classHashString.xhtml">   39</a></span>&#160;<span class="keyword">class </span><a class="code" href="classHashString.xhtml">HashString</a></div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;{</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160; <span class="keyword">protected</span>:</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;   std::string Type;</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;   std::string Hash;</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;   <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">char</span>* _SupportedHashes[10];</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;   <span class="comment">// internal helper</span></div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;   std::string GetHashForFile(std::string filename) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160; <span class="keyword">public</span>:</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;   <a class="code" href="classHashString.xhtml">HashString</a>(std::string Type, std::string Hash);</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;   <a class="code" href="classHashString.xhtml">HashString</a>(std::string StringedHashString);  <span class="comment">// init from str as &quot;type:hash&quot;</span></div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;   <a class="code" href="classHashString.xhtml">HashString</a>();</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;   <span class="comment">// get hash type used</span></div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;   std::string HashType() { <span class="keywordflow">return</span> Type; };</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;   <span class="comment">// verify the given filename against the currently loaded hash</span></div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;   <span class="keywordtype">bool</span> VerifyFile(std::string filename) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;   <span class="comment">// generate a hash string from the given filename</span></div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;   <span class="keywordtype">bool</span> FromFile(std::string filename);</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;   <span class="comment">// helper</span></div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;   std::string toStr() <span class="keyword">const</span>;                    <span class="comment">// convert to str as &quot;type:hash&quot;</span></div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;   <span class="keywordtype">bool</span> empty() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;   <span class="comment">// return the list of hashes we support</span></div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;   <span class="keyword">static</span> APT_CONST <span class="keyword">const</span> <span class="keywordtype">char</span>** SupportedHashes();</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;};</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;</div>
<div class="line"><a name="l00072"></a><span class="lineno"><a class="line" href="classHashes.xhtml">   72</a></span>&#160;<span class="keyword">class </span><a class="code" href="classHashes.xhtml">Hashes</a></div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;{</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;   <span class="keyword">public</span>:</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;   <a class="code" href="classMD5Summation.xhtml">MD5Summation</a> MD5;</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;   <a class="code" href="classSHA1Summation.xhtml">SHA1Summation</a> SHA1;</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;   <a class="code" href="classSHA256Summation.xhtml">SHA256Summation</a> SHA256;</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;   <a class="code" href="classSHA512Summation.xhtml">SHA512Summation</a> SHA512;</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;   </div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;   <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">int</span> UntilEOF = 0;</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;   <span class="keyword">inline</span> <span class="keywordtype">bool</span> Add(<span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *Data,<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">long</span> Size)</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;   {</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;      <span class="keywordflow">return</span> MD5.Add(Data,Size) &amp;&amp; SHA1.Add(Data,Size) &amp;&amp; SHA256.Add(Data,Size) &amp;&amp; SHA512.Add(Data,Size);</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;   };</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;   <span class="keyword">inline</span> <span class="keywordtype">bool</span> Add(<span class="keyword">const</span> <span class="keywordtype">char</span> *Data) {<span class="keywordflow">return</span> Add((<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> <span class="keyword">const</span> *)Data,strlen(Data));};</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;   <span class="keyword">inline</span> <span class="keywordtype">bool</span> AddFD(<span class="keywordtype">int</span> <span class="keyword">const</span> Fd,<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">long</span> Size = 0)</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;   { <span class="keywordflow">return</span> AddFD(Fd, Size, <span class="keyword">true</span>, <span class="keyword">true</span>, <span class="keyword">true</span>, <span class="keyword">true</span>); };</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;   <span class="keywordtype">bool</span> AddFD(<span class="keywordtype">int</span> <span class="keyword">const</span> Fd, <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">long</span> Size, <span class="keywordtype">bool</span> <span class="keyword">const</span> addMD5,</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;              <span class="keywordtype">bool</span> <span class="keyword">const</span> addSHA1, <span class="keywordtype">bool</span> <span class="keyword">const</span> addSHA256, <span class="keywordtype">bool</span> <span class="keyword">const</span> addSHA512);</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;   <span class="keyword">inline</span> <span class="keywordtype">bool</span> AddFD(<a class="code" href="classFileFd.xhtml">FileFd</a> &amp;Fd,<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">long</span> Size = 0)</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;   { <span class="keywordflow">return</span> AddFD(Fd, Size, <span class="keyword">true</span>, <span class="keyword">true</span>, <span class="keyword">true</span>, <span class="keyword">true</span>); };</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;   <span class="keywordtype">bool</span> AddFD(<a class="code" href="classFileFd.xhtml">FileFd</a> &amp;Fd, <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">long</span> Size, <span class="keywordtype">bool</span> <span class="keyword">const</span> addMD5,</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;              <span class="keywordtype">bool</span> <span class="keyword">const</span> addSHA1, <span class="keywordtype">bool</span> <span class="keyword">const</span> addSHA256, <span class="keywordtype">bool</span> <span class="keyword">const</span> addSHA512);</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;   <span class="keyword">inline</span> <span class="keywordtype">bool</span> Add(<span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *Beg,<span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *End) </div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;                  {<span class="keywordflow">return</span> Add(Beg,End-Beg);};</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;};</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="ttc" id="classMD5Summation_xhtml"><div class="ttname"><a href="classMD5Summation.xhtml">MD5Summation</a></div><div class="ttdef"><b>Definition:</b> md5.h:42</div></div>
<div class="ttc" id="classSHA512Summation_xhtml"><div class="ttname"><a href="classSHA512Summation.xhtml">SHA512Summation</a></div><div class="ttdef"><b>Definition:</b> sha2.h:75</div></div>
<div class="ttc" id="classSHA1Summation_xhtml"><div class="ttname"><a href="classSHA1Summation.xhtml">SHA1Summation</a></div><div class="ttdef"><b>Definition:</b> sha1.h:31</div></div>
<div class="ttc" id="classFileFd_xhtml"><div class="ttname"><a href="classFileFd.xhtml">FileFd</a></div><div class="ttdef"><b>Definition:</b> fileutl.h:42</div></div>
<div class="ttc" id="classHashes_xhtml"><div class="ttname"><a href="classHashes.xhtml">Hashes</a></div><div class="ttdef"><b>Definition:</b> hashes.h:72</div></div>
<div class="ttc" id="classHashString_xhtml"><div class="ttname"><a href="classHashString.xhtml">HashString</a></div><div class="ttdef"><b>Definition:</b> hashes.h:39</div></div>
<div class="ttc" id="classSHA256Summation_xhtml"><div class="ttname"><a href="classSHA256Summation.xhtml">SHA256Summation</a></div><div class="ttdef"><b>Definition:</b> sha2.h:42</div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.6
</small></address>
</body>
</html>
